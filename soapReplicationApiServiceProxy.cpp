/* soapReplicationApiServiceProxy.cpp
   Generated by gSOAP 2.8.91 for test.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapReplicationApiServiceProxy.h"

ReplicationApiServiceProxy::ReplicationApiServiceProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	ReplicationApiServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(const ReplicationApiServiceProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ReplicationApiServiceProxy_init(_soap->imode, _soap->omode);
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	ReplicationApiServiceProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	ReplicationApiServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ReplicationApiServiceProxy_init(iomode, iomode);
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ReplicationApiServiceProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

ReplicationApiServiceProxy::ReplicationApiServiceProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ReplicationApiServiceProxy_init(imode, omode);
}

ReplicationApiServiceProxy::~ReplicationApiServiceProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void ReplicationApiServiceProxy::ReplicationApiServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns", "urn:ReplicationApiService", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

ReplicationApiServiceProxy *ReplicationApiServiceProxy::copy()
{	ReplicationApiServiceProxy *dup = SOAP_NEW_UNMANAGED(ReplicationApiServiceProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

ReplicationApiServiceProxy& ReplicationApiServiceProxy::operator=(const ReplicationApiServiceProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void ReplicationApiServiceProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ReplicationApiServiceProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ReplicationApiServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ReplicationApiServiceProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *ReplicationApiServiceProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *ReplicationApiServiceProxy::soap_fault()
{	return this->soap->fault;
}

const char *ReplicationApiServiceProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *ReplicationApiServiceProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *ReplicationApiServiceProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int ReplicationApiServiceProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int ReplicationApiServiceProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void ReplicationApiServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ReplicationApiServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ReplicationApiServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ReplicationApiServiceProxy::send_GetStations(const char *soap_endpoint_url, const char *soap_action, const std::string& login, const std::string& password)
{
	struct ns__GetStations soap_tmp_ns__GetStations;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:80";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns__GetStations.login = login;
	soap_tmp_ns__GetStations.password = password;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__GetStations(soap, &soap_tmp_ns__GetStations);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetStations(soap, &soap_tmp_ns__GetStations, "ns:GetStations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetStations(soap, &soap_tmp_ns__GetStations, "ns:GetStations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ReplicationApiServiceProxy::recv_GetStations(struct ns__GetStationsResponse &_param_1)
{
	soap_default_ns__GetStationsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns__GetStationsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ReplicationApiServiceProxy::send_GetSensors(const char *soap_endpoint_url, const char *soap_action, const std::string& login, const std::string& password, const std::string& StationID, const std::string& From, const std::string& To)
{
	struct ns__GetSensors soap_tmp_ns__GetSensors;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:80";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns__GetSensors.login = login;
	soap_tmp_ns__GetSensors.password = password;
	soap_tmp_ns__GetSensors.StationID = StationID;
	soap_tmp_ns__GetSensors.From = From;
	soap_tmp_ns__GetSensors.To = To;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__GetSensors(soap, &soap_tmp_ns__GetSensors);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetSensors(soap, &soap_tmp_ns__GetSensors, "ns:GetSensors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetSensors(soap, &soap_tmp_ns__GetSensors, "ns:GetSensors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ReplicationApiServiceProxy::recv_GetSensors(struct ns__GetSensorsResponse &_param_1)
{
	soap_default_ns__GetSensorsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns__GetSensorsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ReplicationApiServiceProxy::send_GetHistoricalDataBrief(const char *soap_endpoint_url, const char *soap_action, const std::string& login, const std::string& password, int AveragePeriod, ns__ArrayOfSensors *sSensors, const std::string& From, const std::string& To)
{
	struct ns__GetHistoricalDataBrief soap_tmp_ns__GetHistoricalDataBrief;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:80";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns__GetHistoricalDataBrief.login = login;
	soap_tmp_ns__GetHistoricalDataBrief.password = password;
	soap_tmp_ns__GetHistoricalDataBrief.AveragePeriod = AveragePeriod;
	soap_tmp_ns__GetHistoricalDataBrief.sSensors = sSensors;
	soap_tmp_ns__GetHistoricalDataBrief.From = From;
	soap_tmp_ns__GetHistoricalDataBrief.To = To;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns__GetHistoricalDataBrief(soap, &soap_tmp_ns__GetHistoricalDataBrief);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetHistoricalDataBrief(soap, &soap_tmp_ns__GetHistoricalDataBrief, "ns:GetHistoricalDataBrief", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetHistoricalDataBrief(soap, &soap_tmp_ns__GetHistoricalDataBrief, "ns:GetHistoricalDataBrief", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int ReplicationApiServiceProxy::recv_GetHistoricalDataBrief(struct ns__GetHistoricalDataBriefResponse &_param_1)
{
	soap_default_ns__GetHistoricalDataBriefResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns__GetHistoricalDataBriefResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
