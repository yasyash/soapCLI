#!/usr/bin/perl -w
use POSIX qw(strftime);


#sudo apt-get install  libsoap-lite-perl
#sudo apt-get install libdbd-mysql-perl
#sudo apt-get install libdbi-perl
#sudo apt-get install  libxml-simple-perl
#sudo apt-get install libdatetime-perl
#sudo apt-get install libdatetime-format-strptime-perl


use SOAP::Lite (+trace =>"all", readable => 1);
use SOAP::Lite qw(debug);
#( +trace => , maptype => {} );;
use DBI;
use MIME::Base64;
use XML::Simple;
use DateTime;
use DateTime::Format::Strptime;

use Fcntl ":flock";
use Sys::Syslog;
$lockfilename="/tmp/data_get_pg.lock";
$result_code = 1;

if (!open(LOCKFILE, ">$lockfilename")) {
  print "Can't lock file!";
  exit(1);
}

if (!flock(LOCKFILE, LOCK_EX | LOCK_NB)) {
#if process is already running
  print "Process is already running!\n\n" ;
  syslog('debug', 'data_get_pg: Process already running!');
  exit(1);
}
 
$db = DBI->connect("DBI:Pg:host=localhost;dbname=weather","weather","31415") or die "No access to database: $!";
$i = $j = 0;
$period = 5; # average period is 20 minutes
#$insert
$insert = "INSERT INTO sensors_data (  idd, serialnum, date_time, typemeasure, measure, is_alert)  VALUES(?,?,?,?,?,?)";
$update = "UPDATE equipments SET date_time_out = ? WHERE serialnum = ? AND idd = ?"; 

$query_ins = $db->prepare("$insert");
$query_update = $db->prepare("$update");
$select_st = "SELECT * FROM stations WHERE is_present = true";
	#print ("Select is " .  localtime() . "\n");
	$query_sel = $db->prepare("$select_st");
	$query_sel->execute();

# connection parameters section

$xmlns="http://127.0.0.1:8080";
$method_get = "GetHistoricalDataBrief";

# end connection parameters section


#$password = $user = 'shklyar';
#$prefix =  undef;
$GMT_ADD_ZONE = 0; #because soap service retreives data in UTC format.

	if ($query_sel->rows >0)
	{	
		while (@row_sel = $query_sel->fetchrow_array)
			{
				$ip = $row_sel[9];
		    if ( $ip ne ''){
					print ('Address is ' . $ip ." \n");

				$client=SOAP::Lite->proxy( $ip, timeout => 10);  #waiting timeout
				$client->uri("urn:ReplicationApiService");
				$client->on_fault(\&soap_fault);
				#$client->outputxml('true');
				$client->readable(1);
     				$client->on_action( sub {  join '', '"'.$ip,qq($_[1]")} );


				$Username = SOAP::Header->name('login' => $row_sel[4]);#user
 				$Password = SOAP::Header->name('password' =>  $row_sel[5]);#password
         					#print ('user is ' . $Username);
         					#print ('pwd is ' . $Password);

				$obj_login = SOAP::Data->new(name => 'login', value => $Username);
				$obj_pwd = SOAP::Data->new(name => 'password', value => $Password);

 				$UsernameToken = SOAP::Header->value($Username, $Password);
 				$security = SOAP::Header->name('AuthHeaderInfo')->attr({'xmlns' => $xmlns})->value(\$UsernameToken);

				$select = "SELECT * FROM equipments WHERE idd='". $row_sel[0] ."' AND measure_class <> 'local'    AND is_present = true";
				print ("Select = " . $select . " \n");
				$query = $db->prepare("$select");
				$query->execute();
	

				if ($query->rows >0)
				{	
					print "In query is ". $query->rows ." rows.\n";
					while (@row = $query->fetchrow_array)
						{
						 #@row = $query->fetchrow_array();
						 $_ = $row[4];
			 				m{^\s*(\d{1,4})\W*0*(\d{2})\W*0*(\d{2})\W*0*
        	 			        (\d{2})\W*0*(\d{2})\W*0*(\d{2})}x;

							 $j++;
 						 print "Query === $j === for sensor === $row[1] === \n Serial num. === $row[2]\n Time period is from $row[4] to ".
							 strftime ("%Y-%m-%d %H:%M:%S", localtime)."\n";
						 $avrg_period = SOAP::Data->name('AveragePeriod' => $period);
						 $id = SOAP::Data->name('string' => $row[2]); #sensor ID
						 $sensor = SOAP::Data->name('sSensors')->value(\$id);
							$sec = $6 + 1;
			 			 $from  = SOAP::Data->name('From' => "$1-$2-$3T$4:$5:$sec");
						 $to  = SOAP::Data->name('To' => strftime ("%Y-%m-%dT%H:%M:%S", localtime));
			 

						# $som = $client->call($method_get,$avrg_period, $sensor,$from, $to, $security );
						$result_code=1;
						 $som = $client->call($method_get, $obj_login, $obj_pwd, $avrg_period,  $sensor, $from, $to  ); #hardcoded 5 minutes average period

						 #die $som->faultstring if ($som->fault);
						if ($result_code == 1){
							for  $t ($som->valueof('//GetHistoricalDataBriefResponse/GetHistoricalDataBriefResult/SensorData/Data/BriefData')) 								{
								$i++;
			      					#print $t->{Time} . " - " .  $t->{Value} ."\n";
								$_ = $t->{Time};
								$utc = $t->{Time};
								#print ("real time ====== ".$utc);
								($date, $time) =split("T", $utc);
								($y, $mns, $d) = split("-",$date);
								($h, $m, $s) = split(":",$time);
 								#$_ = $row[4];
			 					#m{^\s*(\d{1,4})\W*0*(\d{2})\W*0*(\d{2})\W*0*
        	 			      			#  (\d{2})\W*0*(\d{2})\W*0*(\d{2})}x;
								
								if (($h+$GMT_ADD_ZONE)>23 )
									{$H = $GMT_ADD_ZONE - 24 + $h;
									 $d=$d+1;
								 	}
								else {
									$H = $h + $GMT_ADD_ZONE;
								};
								
								$loctime  = $y."-".$mns."-".$d." ".$H.":".$m.":".$s;
								#print ("local time ====== ".$loctime);
								#= strptime($utc)->add( hours => $GMT_ADD_ZONE );;
								

								s/T/ /;

								
								#print ("time is ". $H."\n ");
								
								#print ("local time is ". $loctime ."\n ");
								#print ("sys time is ". $_ ."\n ");
								#+$GMT_ADD_ZONE;
								#s/T/ /;
								print "Result === time is === " . $loctime ." === and value === $t->{Value} \n";
								$query_ins->execute( $row[0], $row[2], $loctime, $row[1], $t->{Value}, '0');
								$last_update = $_;
								#print "last updt".$last_update;
								$query_update->execute($last_update, $row[2], $row[0]) if (defined($last_update));
    							}
						}

						print "================================================================\n";

					}
				}
			}
		}
	}
	


$query->finish;
$query_update->finish;
$query_ins ->finish;
$query_sel->finish;


print ("\nThere are ".$j." sensors in the database and " . $i . " records added from SOAP query\n");
$db->disconnect;
#print "Result is: ". XMLout($elm)."\n\n";
#print "Result is: ". $som->dataof('//GetStationsResponse/GetStationsResult/StationInfo/*'). "...\n\n";

close(LOCKFILE);
unlink($lockfilename);
  print "Process is completed!" ;

sub soap_fault()
{
	$result_code = 0;
	  print "Connection fault!\n" ;

}
