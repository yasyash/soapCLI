#!/usr/bin/perl -w

use POSIX qw(strftime);
use DBI;
use File::Copy qw(move);
use utf8;
use DateTime::Format::Strptime;


$db = DBI->connect("DBI:Pg:host=localhost;dbname=weather","weather","31415") or die "No access to database: $!";

$_time  =  strftime ("%Y-%m-%d", localtime);
$_timeM  =  strftime ("%H-%M-%S", localtime);

my $strp = DateTime::Format::Strptime->new(
        pattern  => '%Y-%m-%d %H:%M:%S',
    );
#$insert
$insert = "INSERT INTO sensors_data (  idd, serialnum, date_time, typemeasure, measure, is_alert)  VALUES(?,?,?,?,?,?)";
$update = "UPDATE equipments SET date_time_out = ? WHERE serialnum = ?"; 


$query_ins = $db->prepare("$insert");
$query_update = $db->prepare("$update");


	$select = "SELECT * FROM equipments WHERE measure_class ='data'    AND is_present = true";
	print ("Select = " . $select . " \n");
	$query = $db->prepare("$select");
	$query->execute();
	
	$folder = $_timeM . '---' . $_time.'.csv';

	move $_time.'.csv', $folder;

	if ($query->rows >0){
	$i = 0;	
	
		#$station = $row[13];
	 while (@query_sensor_row = $query->fetchrow_array)
			{
		$time_limit = $query_sensor_row[4];
		$station_id = $query_sensor_row[0];
		$typemeasure = $query_sensor_row[1];
		$serialnum =  $query_sensor_row[2];
		$unit_name =  $query_sensor_row[6];

		utf8::decode($typemeasure);

		if (( $typemeasure eq "бензол") || ( $typemeasure eq 'толуол') || ( $typemeasure eq 'этилбензол') || ( $typemeasure eq 'хлорбензол')
		| ( $typemeasure eq 'м,п-ксилол') || ( $typemeasure eq 'о-ксилол') || ( $typemeasure eq 'стирол') || ( $typemeasure eq 'фенол'))
		{
		
		$j = 0;
		print($typemeasure . "  -  serial number is ".$serialnum." folder is ". $folder ."\n");
		
		open(FILE, $folder) or die "Can't access to text file: $!";

		
		#$station_id = lc($ARGV[1]);

		foreach  (<FILE>) 
			{ 
			 s/^\s+//;
			 #print $_;
  			 if (m/^\d+/)
   			   {
				#print $_;
				s/---/0/g;					#replace --- to 0
				#split /\r\n|\n/;				#trancate last /n/r or /n symbols
				@data = split /,/ ;
				#print((@data[0] . "\n"));
				$_ = $data[0];
				#$data[0] = join('-', reverse split /\./); 	#convert dd.mm.yy to sql friendly view like yy-mm-dd
				$data[0] = join('-',  split /\./); 	#convert dd.mm.yy to sql friendly view like yy-mm-dd
				$data[0] = $data[0] ." ".$data[1].":00";
				splice @data, 1, 1; # convert date and time to datetime

				$date_time = $data[0];

				$date_sensors = $strp->parse_datetime(  $time_limit);

				$date_file = $strp->parse_datetime(  $date_time);
				if ( $date_sensors < $date_file)
				{
				 $BZ = $data[1];
				 $TL = $data[2];
				 $EBZ = $data[3];
				 $MPXL = $data[4];
				 $STR = $data[5];
				 $OXL = $data[6];
				 $FNL = $data[7];
				 $CLBZ = $data[8];
					
					$j++;

			   	    if ( $typemeasure eq 'бензол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'бензол', $BZ, 'false');
					$measure = $BZ;
					}
				    if ( $typemeasure eq 'толуол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'толуол', $TL, 'false');
					$measure = $TL;
					}
				    if ( $typemeasure eq 'этилбензол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'этилбензол', $EBZ, 'false');
					$measure = $EBZ;
					}
				    if ( $typemeasure eq 'хлорбензол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'хлорбензол', $CLBZ, 'false');
					$measure = $CLBZ;
					}
				    if ( $typemeasure eq 'м,п-ксилол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'м,п-ксилол', $MPXL, 'false');
					$measure = $MPXL;
					}
				    if ( $typemeasure eq 'о-ксилол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'о-ксилол', $OXL, 'false');
					$measure = $OXL;
					}
				    if ( $typemeasure eq 'стирол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'стирол', $STR, 'false');
					$measure = $STR;
					}
				    if ( $typemeasure eq 'фенол'){
					$query_ins->execute($station_id, $serialnum, $date_time, 'фенол', $FNL, 'false');
					$measure = $FNL;
					}
				  	
					print("Time is ".$date_file.", sensor is ".$typemeasure.", measure is ". $measure ."\n");

					$query_update->execute($date_file, $serialnum);

				}
				
			}
			if ($j > 0)
			{print ($j . "records added...\n==============================================================\n");}
		
		 }	
		$i++;
		
		close (FILE);
		}

	 }

		print ("\nData of ". ($i) . " sensors have been added of ". $station_id." station\n" );
	
	
	   $query->finish;
	   #$query_update->finish;
	   $query_ins ->finish;
    }
	#

	$db->disconnect;
