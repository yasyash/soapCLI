/* soapReplicationApiServiceService.cpp
   Generated by gSOAP 2.8.75 for replicator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapReplicationApiServiceService.h"

ReplicationApiServiceService::ReplicationApiServiceService() : soap(SOAP_IO_DEFAULT)
{	ReplicationApiServiceService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ReplicationApiServiceService::ReplicationApiServiceService(const ReplicationApiServiceService& rhs)
{	soap_copy_context(this, &rhs);
}

ReplicationApiServiceService::ReplicationApiServiceService(const struct soap &_soap) : soap(_soap)
{ }

ReplicationApiServiceService::ReplicationApiServiceService(soap_mode iomode) : soap(iomode)
{	ReplicationApiServiceService_init(iomode, iomode);
}

ReplicationApiServiceService::ReplicationApiServiceService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ReplicationApiServiceService_init(imode, omode);
}

ReplicationApiServiceService::~ReplicationApiServiceService()
{
	this->destroy();
}

void ReplicationApiServiceService::ReplicationApiServiceService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns", "urn:ReplicationApiService", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void ReplicationApiServiceService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ReplicationApiServiceService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ReplicationApiServiceService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ReplicationApiServiceService *ReplicationApiServiceService::copy()
{	ReplicationApiServiceService *dup = SOAP_NEW_UNMANAGED(ReplicationApiServiceService(*(struct soap*)this));
	return dup;
}
#endif

ReplicationApiServiceService& ReplicationApiServiceService::operator=(const ReplicationApiServiceService& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	return *this;
}

int ReplicationApiServiceService::soap_close_socket()
{	return soap_closesock(this);
}

int ReplicationApiServiceService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int ReplicationApiServiceService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int ReplicationApiServiceService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int ReplicationApiServiceService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int ReplicationApiServiceService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void ReplicationApiServiceService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ReplicationApiServiceService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ReplicationApiServiceService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void ReplicationApiServiceService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *ReplicationApiServiceService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int ReplicationApiServiceService::run(int port, int backlog)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ReplicationApiServiceService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET ReplicationApiServiceService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET ReplicationApiServiceService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ReplicationApiServiceService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int ReplicationApiServiceService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__GetStations(ReplicationApiServiceService*);
static int serve_ns__GetSensors(ReplicationApiServiceService*);

int ReplicationApiServiceService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:GetStations"))
		return serve_ns__GetStations(this);
	if (!soap_match_tag(this, this->tag, "ns:GetSensors"))
		return serve_ns__GetSensors(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__GetStations(ReplicationApiServiceService *soap)
{	struct ns__GetStations soap_tmp_ns__GetStations;
	ns__GetStationsResponse result;
	result.soap_default(soap);
	soap_default_ns__GetStations(soap, &soap_tmp_ns__GetStations);
	if (!soap_get_ns__GetStations(soap, &soap_tmp_ns__GetStations, "ns:GetStations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetStations(soap_tmp_ns__GetStations.soap, soap_tmp_ns__GetStations.login, soap_tmp_ns__GetStations.password, result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:GetStationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:GetStationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__GetSensors(ReplicationApiServiceService *soap)
{	struct ns__GetSensors soap_tmp_ns__GetSensors;
	ns__GetSensorsResponse result;
	result.soap_default(soap);
	soap_default_ns__GetSensors(soap, &soap_tmp_ns__GetSensors);
	if (!soap_get_ns__GetSensors(soap, &soap_tmp_ns__GetSensors, "ns:GetSensors", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetSensors(soap_tmp_ns__GetSensors.soap, soap_tmp_ns__GetSensors.login, soap_tmp_ns__GetSensors.password, soap_tmp_ns__GetSensors.StationID, soap_tmp_ns__GetSensors.From, soap_tmp_ns__GetSensors.To, result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = ""; /* use SOAP encoding style */
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:GetSensorsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:GetSensorsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
