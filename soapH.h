/* soapH.h
   Generated by gSOAP 2.8.117 for test.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (::soap_read_float(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__MeasurementClasses_DEFINED
#define SOAP_TYPE_ns__MeasurementClasses_DEFINED

inline void soap_default_ns__MeasurementClasses(struct soap *soap, enum ns__MeasurementClasses *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__MeasurementClasses
	*a = SOAP_DEFAULT_ns__MeasurementClasses;
#else
	*a = (enum ns__MeasurementClasses)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MeasurementClasses(struct soap*, const char*, int, const enum ns__MeasurementClasses *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__MeasurementClasses2s(struct soap*, enum ns__MeasurementClasses);
SOAP_FMAC3 enum ns__MeasurementClasses * SOAP_FMAC4 soap_in_ns__MeasurementClasses(struct soap*, const char*, enum ns__MeasurementClasses *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__MeasurementClasses(struct soap*, const char*, enum ns__MeasurementClasses *);

SOAP_FMAC3 enum ns__MeasurementClasses * SOAP_FMAC4 soap_new_ns__MeasurementClasses(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MeasurementClasses(struct soap*, const enum ns__MeasurementClasses *, const char*, const char*);

inline int soap_write_ns__MeasurementClasses(struct soap *soap, enum ns__MeasurementClasses const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns__MeasurementClasses(soap, p, "ns:MeasurementClasses", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__MeasurementClasses(struct soap *soap, const char *URL, enum ns__MeasurementClasses const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__MeasurementClasses(soap, p, "ns:MeasurementClasses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__MeasurementClasses(struct soap *soap, const char *URL, enum ns__MeasurementClasses const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__MeasurementClasses(soap, p, "ns:MeasurementClasses", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__MeasurementClasses(struct soap *soap, const char *URL, enum ns__MeasurementClasses const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__MeasurementClasses(soap, p, "ns:MeasurementClasses", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__MeasurementClasses * SOAP_FMAC4 soap_get_ns__MeasurementClasses(struct soap*, enum ns__MeasurementClasses *, const char*, const char*);

inline int soap_read_ns__MeasurementClasses(struct soap *soap, enum ns__MeasurementClasses *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns__MeasurementClasses(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__MeasurementClasses(struct soap *soap, const char *URL, enum ns__MeasurementClasses *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__MeasurementClasses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__MeasurementClasses(struct soap *soap, enum ns__MeasurementClasses *p)
{
	if (::soap_read_ns__MeasurementClasses(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__UserAccessRightCode_DEFINED
#define SOAP_TYPE_ns__UserAccessRightCode_DEFINED

inline void soap_default_ns__UserAccessRightCode(struct soap *soap, enum ns__UserAccessRightCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__UserAccessRightCode
	*a = SOAP_DEFAULT_ns__UserAccessRightCode;
#else
	*a = (enum ns__UserAccessRightCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UserAccessRightCode(struct soap*, const char*, int, const enum ns__UserAccessRightCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__UserAccessRightCode2s(struct soap*, enum ns__UserAccessRightCode);
SOAP_FMAC3 enum ns__UserAccessRightCode * SOAP_FMAC4 soap_in_ns__UserAccessRightCode(struct soap*, const char*, enum ns__UserAccessRightCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__UserAccessRightCode(struct soap*, const char*, enum ns__UserAccessRightCode *);

SOAP_FMAC3 enum ns__UserAccessRightCode * SOAP_FMAC4 soap_new_ns__UserAccessRightCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__UserAccessRightCode(struct soap*, const enum ns__UserAccessRightCode *, const char*, const char*);

inline int soap_write_ns__UserAccessRightCode(struct soap *soap, enum ns__UserAccessRightCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns__UserAccessRightCode(soap, p, "ns:UserAccessRightCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__UserAccessRightCode(struct soap *soap, const char *URL, enum ns__UserAccessRightCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__UserAccessRightCode(soap, p, "ns:UserAccessRightCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__UserAccessRightCode(struct soap *soap, const char *URL, enum ns__UserAccessRightCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__UserAccessRightCode(soap, p, "ns:UserAccessRightCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__UserAccessRightCode(struct soap *soap, const char *URL, enum ns__UserAccessRightCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__UserAccessRightCode(soap, p, "ns:UserAccessRightCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__UserAccessRightCode * SOAP_FMAC4 soap_get_ns__UserAccessRightCode(struct soap*, enum ns__UserAccessRightCode *, const char*, const char*);

inline int soap_read_ns__UserAccessRightCode(struct soap *soap, enum ns__UserAccessRightCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns__UserAccessRightCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UserAccessRightCode(struct soap *soap, const char *URL, enum ns__UserAccessRightCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__UserAccessRightCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__UserAccessRightCode(struct soap *soap, enum ns__UserAccessRightCode *p)
{
	if (::soap_read_ns__UserAccessRightCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ErrorCode_DEFINED
#define SOAP_TYPE_ns__ErrorCode_DEFINED

inline void soap_default_ns__ErrorCode(struct soap *soap, enum ns__ErrorCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns__ErrorCode
	*a = SOAP_DEFAULT_ns__ErrorCode;
#else
	*a = (enum ns__ErrorCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ErrorCode(struct soap*, const char*, int, const enum ns__ErrorCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns__ErrorCode2s(struct soap*, enum ns__ErrorCode);
SOAP_FMAC3 enum ns__ErrorCode * SOAP_FMAC4 soap_in_ns__ErrorCode(struct soap*, const char*, enum ns__ErrorCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns__ErrorCode(struct soap*, const char*, enum ns__ErrorCode *);

SOAP_FMAC3 enum ns__ErrorCode * SOAP_FMAC4 soap_new_ns__ErrorCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ErrorCode(struct soap*, const enum ns__ErrorCode *, const char*, const char*);

inline int soap_write_ns__ErrorCode(struct soap *soap, enum ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns__ErrorCode(soap, p, "ns:ErrorCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns__ErrorCode(struct soap *soap, const char *URL, enum ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__ErrorCode(soap, p, "ns:ErrorCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ErrorCode(struct soap *soap, const char *URL, enum ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__ErrorCode(soap, p, "ns:ErrorCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ErrorCode(struct soap *soap, const char *URL, enum ns__ErrorCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns__ErrorCode(soap, p, "ns:ErrorCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns__ErrorCode * SOAP_FMAC4 soap_get_ns__ErrorCode(struct soap*, enum ns__ErrorCode *, const char*, const char*);

inline int soap_read_ns__ErrorCode(struct soap *soap, enum ns__ErrorCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns__ErrorCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ErrorCode(struct soap *soap, const char *URL, enum ns__ErrorCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ErrorCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ErrorCode(struct soap *soap, enum ns__ErrorCode *p)
{
	if (::soap_read_ns__ErrorCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ArrayOfSensors_DEFINED
#define SOAP_TYPE_ns__ArrayOfSensors_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ArrayOfSensors(struct soap*, const char*, int, const ns__ArrayOfSensors *, const char*);
SOAP_FMAC3 ns__ArrayOfSensors * SOAP_FMAC4 soap_in_ns__ArrayOfSensors(struct soap*, const char*, ns__ArrayOfSensors *, const char*);
SOAP_FMAC1 ns__ArrayOfSensors * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensors(struct soap*, int, const char*, const char*, size_t*);

inline ns__ArrayOfSensors * soap_new_ns__ArrayOfSensors(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__ArrayOfSensors(soap, n, NULL, NULL, NULL);
}

inline ns__ArrayOfSensors * soap_new_req_ns__ArrayOfSensors(
	struct soap *soap)
{
	ns__ArrayOfSensors *_p = ::soap_new_ns__ArrayOfSensors(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ArrayOfSensors * soap_new_set_ns__ArrayOfSensors(
	struct soap *soap,
	const std::vector<std::string> & string)
{
	ns__ArrayOfSensors *_p = ::soap_new_ns__ArrayOfSensors(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ArrayOfSensors::string = string;
	}
	return _p;
}

inline int soap_write_ns__ArrayOfSensors(struct soap *soap, ns__ArrayOfSensors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensors", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensors ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ArrayOfSensors(struct soap *soap, const char *URL, ns__ArrayOfSensors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensors", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ArrayOfSensors(struct soap *soap, const char *URL, ns__ArrayOfSensors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensors", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensors ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ArrayOfSensors(struct soap *soap, const char *URL, ns__ArrayOfSensors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensors", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensors ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__ArrayOfSensors * SOAP_FMAC4 soap_get_ns__ArrayOfSensors(struct soap*, ns__ArrayOfSensors *, const char*, const char*);

inline int soap_read_ns__ArrayOfSensors(struct soap *soap, ns__ArrayOfSensors *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__ArrayOfSensors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ArrayOfSensors(struct soap *soap, const char *URL, ns__ArrayOfSensors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ArrayOfSensors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ArrayOfSensors(struct soap *soap, ns__ArrayOfSensors *p)
{
	if (::soap_read_ns__ArrayOfSensors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__StInfo_DEFINED
#define SOAP_TYPE_ns__StInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StInfo(struct soap*, const char*, int, const ns__StInfo *, const char*);
SOAP_FMAC3 ns__StInfo * SOAP_FMAC4 soap_in_ns__StInfo(struct soap*, const char*, ns__StInfo *, const char*);
SOAP_FMAC1 ns__StInfo * SOAP_FMAC2 soap_instantiate_ns__StInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__StInfo * soap_new_ns__StInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__StInfo(soap, n, NULL, NULL, NULL);
}

inline ns__StInfo * soap_new_req_ns__StInfo(
	struct soap *soap,
	const std::string& ID,
	int Code,
	const std::string& Name,
	int UpdatePeriod,
	enum ns__UserAccessRightCode UserAccessRight)
{
	ns__StInfo *_p = ::soap_new_ns__StInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__StInfo::ID = ID;
		_p->ns__StInfo::Code = Code;
		_p->ns__StInfo::Name = Name;
		_p->ns__StInfo::UpdatePeriod = UpdatePeriod;
		_p->ns__StInfo::UserAccessRight = UserAccessRight;
	}
	return _p;
}

inline ns__StInfo * soap_new_set_ns__StInfo(
	struct soap *soap,
	const std::string& ID,
	int Code,
	const std::string& Name,
	int UpdatePeriod,
	enum ns__UserAccessRightCode UserAccessRight)
{
	ns__StInfo *_p = ::soap_new_ns__StInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__StInfo::ID = ID;
		_p->ns__StInfo::Code = Code;
		_p->ns__StInfo::Name = Name;
		_p->ns__StInfo::UpdatePeriod = UpdatePeriod;
		_p->ns__StInfo::UserAccessRight = UserAccessRight;
	}
	return _p;
}

inline int soap_write_ns__StInfo(struct soap *soap, ns__StInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StInfo", p->soap_type() == SOAP_TYPE_ns__StInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__StInfo(struct soap *soap, const char *URL, ns__StInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StInfo", p->soap_type() == SOAP_TYPE_ns__StInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__StInfo(struct soap *soap, const char *URL, ns__StInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StInfo", p->soap_type() == SOAP_TYPE_ns__StInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__StInfo(struct soap *soap, const char *URL, ns__StInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StInfo", p->soap_type() == SOAP_TYPE_ns__StInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__StInfo * SOAP_FMAC4 soap_get_ns__StInfo(struct soap*, ns__StInfo *, const char*, const char*);

inline int soap_read_ns__StInfo(struct soap *soap, ns__StInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__StInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__StInfo(struct soap *soap, const char *URL, ns__StInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__StInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__StInfo(struct soap *soap, ns__StInfo *p)
{
	if (::soap_read_ns__StInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ArrayOfSensorData_DEFINED
#define SOAP_TYPE_ns__ArrayOfSensorData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ArrayOfSensorData(struct soap*, const char*, int, const ns__ArrayOfSensorData *, const char*);
SOAP_FMAC3 ns__ArrayOfSensorData * SOAP_FMAC4 soap_in_ns__ArrayOfSensorData(struct soap*, const char*, ns__ArrayOfSensorData *, const char*);
SOAP_FMAC1 ns__ArrayOfSensorData * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensorData(struct soap*, int, const char*, const char*, size_t*);

inline ns__ArrayOfSensorData * soap_new_ns__ArrayOfSensorData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__ArrayOfSensorData(soap, n, NULL, NULL, NULL);
}

inline ns__ArrayOfSensorData * soap_new_req_ns__ArrayOfSensorData(
	struct soap *soap)
{
	ns__ArrayOfSensorData *_p = ::soap_new_ns__ArrayOfSensorData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ArrayOfSensorData * soap_new_set_ns__ArrayOfSensorData(
	struct soap *soap,
	const std::vector<ns__SensorData *> & SensorData)
{
	ns__ArrayOfSensorData *_p = ::soap_new_ns__ArrayOfSensorData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ArrayOfSensorData::SensorData = SensorData;
	}
	return _p;
}

inline int soap_write_ns__ArrayOfSensorData(struct soap *soap, ns__ArrayOfSensorData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorData", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ArrayOfSensorData(struct soap *soap, const char *URL, ns__ArrayOfSensorData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorData", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ArrayOfSensorData(struct soap *soap, const char *URL, ns__ArrayOfSensorData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorData", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ArrayOfSensorData(struct soap *soap, const char *URL, ns__ArrayOfSensorData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorData", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__ArrayOfSensorData * SOAP_FMAC4 soap_get_ns__ArrayOfSensorData(struct soap*, ns__ArrayOfSensorData *, const char*, const char*);

inline int soap_read_ns__ArrayOfSensorData(struct soap *soap, ns__ArrayOfSensorData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__ArrayOfSensorData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ArrayOfSensorData(struct soap *soap, const char *URL, ns__ArrayOfSensorData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ArrayOfSensorData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ArrayOfSensorData(struct soap *soap, ns__ArrayOfSensorData *p)
{
	if (::soap_read_ns__ArrayOfSensorData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ArrayOfSensorsInfo_DEFINED
#define SOAP_TYPE_ns__ArrayOfSensorsInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ArrayOfSensorsInfo(struct soap*, const char*, int, const ns__ArrayOfSensorsInfo *, const char*);
SOAP_FMAC3 ns__ArrayOfSensorsInfo * SOAP_FMAC4 soap_in_ns__ArrayOfSensorsInfo(struct soap*, const char*, ns__ArrayOfSensorsInfo *, const char*);
SOAP_FMAC1 ns__ArrayOfSensorsInfo * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensorsInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__ArrayOfSensorsInfo * soap_new_ns__ArrayOfSensorsInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__ArrayOfSensorsInfo(soap, n, NULL, NULL, NULL);
}

inline ns__ArrayOfSensorsInfo * soap_new_req_ns__ArrayOfSensorsInfo(
	struct soap *soap)
{
	ns__ArrayOfSensorsInfo *_p = ::soap_new_ns__ArrayOfSensorsInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ArrayOfSensorsInfo * soap_new_set_ns__ArrayOfSensorsInfo(
	struct soap *soap,
	const std::vector<ns__SensorInfo *> & SensorsInfo)
{
	ns__ArrayOfSensorsInfo *_p = ::soap_new_ns__ArrayOfSensorsInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ArrayOfSensorsInfo::SensorsInfo = SensorsInfo;
	}
	return _p;
}

inline int soap_write_ns__ArrayOfSensorsInfo(struct soap *soap, ns__ArrayOfSensorsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorsInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorsInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ArrayOfSensorsInfo(struct soap *soap, const char *URL, ns__ArrayOfSensorsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorsInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorsInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ArrayOfSensorsInfo(struct soap *soap, const char *URL, ns__ArrayOfSensorsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorsInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorsInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ArrayOfSensorsInfo(struct soap *soap, const char *URL, ns__ArrayOfSensorsInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfSensorsInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfSensorsInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__ArrayOfSensorsInfo * SOAP_FMAC4 soap_get_ns__ArrayOfSensorsInfo(struct soap*, ns__ArrayOfSensorsInfo *, const char*, const char*);

inline int soap_read_ns__ArrayOfSensorsInfo(struct soap *soap, ns__ArrayOfSensorsInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__ArrayOfSensorsInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ArrayOfSensorsInfo(struct soap *soap, const char *URL, ns__ArrayOfSensorsInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ArrayOfSensorsInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ArrayOfSensorsInfo(struct soap *soap, ns__ArrayOfSensorsInfo *p)
{
	if (::soap_read_ns__ArrayOfSensorsInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ArrayOfStationInfo_DEFINED
#define SOAP_TYPE_ns__ArrayOfStationInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ArrayOfStationInfo(struct soap*, const char*, int, const ns__ArrayOfStationInfo *, const char*);
SOAP_FMAC3 ns__ArrayOfStationInfo * SOAP_FMAC4 soap_in_ns__ArrayOfStationInfo(struct soap*, const char*, ns__ArrayOfStationInfo *, const char*);
SOAP_FMAC1 ns__ArrayOfStationInfo * SOAP_FMAC2 soap_instantiate_ns__ArrayOfStationInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__ArrayOfStationInfo * soap_new_ns__ArrayOfStationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__ArrayOfStationInfo(soap, n, NULL, NULL, NULL);
}

inline ns__ArrayOfStationInfo * soap_new_req_ns__ArrayOfStationInfo(
	struct soap *soap)
{
	ns__ArrayOfStationInfo *_p = ::soap_new_ns__ArrayOfStationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ArrayOfStationInfo * soap_new_set_ns__ArrayOfStationInfo(
	struct soap *soap,
	const std::vector<ns__StationInfo *> & StationsInfo)
{
	ns__ArrayOfStationInfo *_p = ::soap_new_ns__ArrayOfStationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ArrayOfStationInfo::StationsInfo = StationsInfo;
	}
	return _p;
}

inline int soap_write_ns__ArrayOfStationInfo(struct soap *soap, ns__ArrayOfStationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfStationInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfStationInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ArrayOfStationInfo(struct soap *soap, const char *URL, ns__ArrayOfStationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfStationInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfStationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ArrayOfStationInfo(struct soap *soap, const char *URL, ns__ArrayOfStationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfStationInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfStationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ArrayOfStationInfo(struct soap *soap, const char *URL, ns__ArrayOfStationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfStationInfo", p->soap_type() == SOAP_TYPE_ns__ArrayOfStationInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__ArrayOfStationInfo * SOAP_FMAC4 soap_get_ns__ArrayOfStationInfo(struct soap*, ns__ArrayOfStationInfo *, const char*, const char*);

inline int soap_read_ns__ArrayOfStationInfo(struct soap *soap, ns__ArrayOfStationInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__ArrayOfStationInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ArrayOfStationInfo(struct soap *soap, const char *URL, ns__ArrayOfStationInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ArrayOfStationInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ArrayOfStationInfo(struct soap *soap, ns__ArrayOfStationInfo *p)
{
	if (::soap_read_ns__ArrayOfStationInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__SensorData_DEFINED
#define SOAP_TYPE_ns__SensorData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorData(struct soap*, const char*, int, const ns__SensorData *, const char*);
SOAP_FMAC3 ns__SensorData * SOAP_FMAC4 soap_in_ns__SensorData(struct soap*, const char*, ns__SensorData *, const char*);
SOAP_FMAC1 ns__SensorData * SOAP_FMAC2 soap_instantiate_ns__SensorData(struct soap*, int, const char*, const char*, size_t*);

inline ns__SensorData * soap_new_ns__SensorData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__SensorData(soap, n, NULL, NULL, NULL);
}

inline ns__SensorData * soap_new_req_ns__SensorData(
	struct soap *soap,
	const std::string& SensorID)
{
	ns__SensorData *_p = ::soap_new_ns__SensorData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__SensorData::SensorID = SensorID;
	}
	return _p;
}

inline ns__SensorData * soap_new_set_ns__SensorData(
	struct soap *soap,
	const std::string& SensorID,
	ns__ArrayOfBriefData *Data)
{
	ns__SensorData *_p = ::soap_new_ns__SensorData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__SensorData::SensorID = SensorID;
		_p->ns__SensorData::Data = Data;
	}
	return _p;
}

inline int soap_write_ns__SensorData(struct soap *soap, ns__SensorData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorData", p->soap_type() == SOAP_TYPE_ns__SensorData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SensorData(struct soap *soap, const char *URL, ns__SensorData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorData", p->soap_type() == SOAP_TYPE_ns__SensorData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__SensorData(struct soap *soap, const char *URL, ns__SensorData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorData", p->soap_type() == SOAP_TYPE_ns__SensorData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__SensorData(struct soap *soap, const char *URL, ns__SensorData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorData", p->soap_type() == SOAP_TYPE_ns__SensorData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__SensorData * SOAP_FMAC4 soap_get_ns__SensorData(struct soap*, ns__SensorData *, const char*, const char*);

inline int soap_read_ns__SensorData(struct soap *soap, ns__SensorData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__SensorData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SensorData(struct soap *soap, const char *URL, ns__SensorData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__SensorData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__SensorData(struct soap *soap, ns__SensorData *p)
{
	if (::soap_read_ns__SensorData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__SensorInfo_DEFINED
#define SOAP_TYPE_ns__SensorInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__SensorInfo(struct soap*, const char*, int, const ns__SensorInfo *, const char*);
SOAP_FMAC3 ns__SensorInfo * SOAP_FMAC4 soap_in_ns__SensorInfo(struct soap*, const char*, ns__SensorInfo *, const char*);
SOAP_FMAC1 ns__SensorInfo * SOAP_FMAC2 soap_instantiate_ns__SensorInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__SensorInfo * soap_new_ns__SensorInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__SensorInfo(soap, n, NULL, NULL, NULL);
}

inline ns__SensorInfo * soap_new_req_ns__SensorInfo(
	struct soap *soap,
	const std::string& ID,
	const std::string& Name,
	int AveragePeriod,
	enum ns__MeasurementClasses MeasurClass,
	const std::string& StationID,
	bool IsWeathercock,
	double PDKValue,
	double PDKDayValue,
	int DefaultColor)
{
	ns__SensorInfo *_p = ::soap_new_ns__SensorInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__SensorInfo::ID = ID;
		_p->ns__SensorInfo::Name = Name;
		_p->ns__SensorInfo::AveragePeriod = AveragePeriod;
		_p->ns__SensorInfo::MeasurClass = MeasurClass;
		_p->ns__SensorInfo::StationID = StationID;
		_p->ns__SensorInfo::IsWeathercock = IsWeathercock;
		_p->ns__SensorInfo::PDKValue = PDKValue;
		_p->ns__SensorInfo::PDKDayValue = PDKDayValue;
		_p->ns__SensorInfo::DefaultColor = DefaultColor;
	}
	return _p;
}

inline ns__SensorInfo * soap_new_set_ns__SensorInfo(
	struct soap *soap,
	const std::string& ID,
	const std::string& Name,
	int AveragePeriod,
	ns__UnitInfo *Unit,
	enum ns__MeasurementClasses MeasurClass,
	const std::string& StationID,
	bool IsWeathercock,
	double PDKValue,
	double PDKDayValue,
	int DefaultColor)
{
	ns__SensorInfo *_p = ::soap_new_ns__SensorInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__SensorInfo::ID = ID;
		_p->ns__SensorInfo::Name = Name;
		_p->ns__SensorInfo::AveragePeriod = AveragePeriod;
		_p->ns__SensorInfo::Unit = Unit;
		_p->ns__SensorInfo::MeasurClass = MeasurClass;
		_p->ns__SensorInfo::StationID = StationID;
		_p->ns__SensorInfo::IsWeathercock = IsWeathercock;
		_p->ns__SensorInfo::PDKValue = PDKValue;
		_p->ns__SensorInfo::PDKDayValue = PDKDayValue;
		_p->ns__SensorInfo::DefaultColor = DefaultColor;
	}
	return _p;
}

inline int soap_write_ns__SensorInfo(struct soap *soap, ns__SensorInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorInfo", p->soap_type() == SOAP_TYPE_ns__SensorInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__SensorInfo(struct soap *soap, const char *URL, ns__SensorInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorInfo", p->soap_type() == SOAP_TYPE_ns__SensorInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__SensorInfo(struct soap *soap, const char *URL, ns__SensorInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorInfo", p->soap_type() == SOAP_TYPE_ns__SensorInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__SensorInfo(struct soap *soap, const char *URL, ns__SensorInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:SensorInfo", p->soap_type() == SOAP_TYPE_ns__SensorInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__SensorInfo * SOAP_FMAC4 soap_get_ns__SensorInfo(struct soap*, ns__SensorInfo *, const char*, const char*);

inline int soap_read_ns__SensorInfo(struct soap *soap, ns__SensorInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__SensorInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__SensorInfo(struct soap *soap, const char *URL, ns__SensorInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__SensorInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__SensorInfo(struct soap *soap, ns__SensorInfo *p)
{
	if (::soap_read_ns__SensorInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__UnitInfo_DEFINED
#define SOAP_TYPE_ns__UnitInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__UnitInfo(struct soap*, const char*, int, const ns__UnitInfo *, const char*);
SOAP_FMAC3 ns__UnitInfo * SOAP_FMAC4 soap_in_ns__UnitInfo(struct soap*, const char*, ns__UnitInfo *, const char*);
SOAP_FMAC1 ns__UnitInfo * SOAP_FMAC2 soap_instantiate_ns__UnitInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__UnitInfo * soap_new_ns__UnitInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__UnitInfo(soap, n, NULL, NULL, NULL);
}

inline ns__UnitInfo * soap_new_req_ns__UnitInfo(
	struct soap *soap,
	const std::string& ID,
	const std::string& Name)
{
	ns__UnitInfo *_p = ::soap_new_ns__UnitInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UnitInfo::ID = ID;
		_p->ns__UnitInfo::Name = Name;
	}
	return _p;
}

inline ns__UnitInfo * soap_new_set_ns__UnitInfo(
	struct soap *soap,
	const std::string& ID,
	const std::string& Name)
{
	ns__UnitInfo *_p = ::soap_new_ns__UnitInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__UnitInfo::ID = ID;
		_p->ns__UnitInfo::Name = Name;
	}
	return _p;
}

inline int soap_write_ns__UnitInfo(struct soap *soap, ns__UnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UnitInfo", p->soap_type() == SOAP_TYPE_ns__UnitInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__UnitInfo(struct soap *soap, const char *URL, ns__UnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UnitInfo", p->soap_type() == SOAP_TYPE_ns__UnitInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__UnitInfo(struct soap *soap, const char *URL, ns__UnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UnitInfo", p->soap_type() == SOAP_TYPE_ns__UnitInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__UnitInfo(struct soap *soap, const char *URL, ns__UnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:UnitInfo", p->soap_type() == SOAP_TYPE_ns__UnitInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__UnitInfo * SOAP_FMAC4 soap_get_ns__UnitInfo(struct soap*, ns__UnitInfo *, const char*, const char*);

inline int soap_read_ns__UnitInfo(struct soap *soap, ns__UnitInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__UnitInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__UnitInfo(struct soap *soap, const char *URL, ns__UnitInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__UnitInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__UnitInfo(struct soap *soap, ns__UnitInfo *p)
{
	if (::soap_read_ns__UnitInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__StationInfo_DEFINED
#define SOAP_TYPE_ns__StationInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StationInfo(struct soap*, const char*, int, const ns__StationInfo *, const char*);
SOAP_FMAC3 ns__StationInfo * SOAP_FMAC4 soap_in_ns__StationInfo(struct soap*, const char*, ns__StationInfo *, const char*);
SOAP_FMAC1 ns__StationInfo * SOAP_FMAC2 soap_instantiate_ns__StationInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns__StationInfo * soap_new_ns__StationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__StationInfo(soap, n, NULL, NULL, NULL);
}

inline ns__StationInfo * soap_new_req_ns__StationInfo(
	struct soap *soap,
	const std::string& ID,
	int Code,
	const std::string& Name,
	int UpdatePeriod,
	const std::string& Place,
	float Latitude,
	float Longitude,
	const std::string& UserAccessRight)
{
	ns__StationInfo *_p = ::soap_new_ns__StationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__StationInfo::ID = ID;
		_p->ns__StationInfo::Code = Code;
		_p->ns__StationInfo::Name = Name;
		_p->ns__StationInfo::UpdatePeriod = UpdatePeriod;
		_p->ns__StationInfo::Place = Place;
		_p->ns__StationInfo::Latitude = Latitude;
		_p->ns__StationInfo::Longitude = Longitude;
		_p->ns__StationInfo::UserAccessRight = UserAccessRight;
	}
	return _p;
}

inline ns__StationInfo * soap_new_set_ns__StationInfo(
	struct soap *soap,
	const std::string& ID,
	int Code,
	const std::string& Name,
	int UpdatePeriod,
	const std::string& Place,
	float Latitude,
	float Longitude,
	const std::string& UserAccessRight)
{
	ns__StationInfo *_p = ::soap_new_ns__StationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__StationInfo::ID = ID;
		_p->ns__StationInfo::Code = Code;
		_p->ns__StationInfo::Name = Name;
		_p->ns__StationInfo::UpdatePeriod = UpdatePeriod;
		_p->ns__StationInfo::Place = Place;
		_p->ns__StationInfo::Latitude = Latitude;
		_p->ns__StationInfo::Longitude = Longitude;
		_p->ns__StationInfo::UserAccessRight = UserAccessRight;
	}
	return _p;
}

inline int soap_write_ns__StationInfo(struct soap *soap, ns__StationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StationInfo", p->soap_type() == SOAP_TYPE_ns__StationInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__StationInfo(struct soap *soap, const char *URL, ns__StationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StationInfo", p->soap_type() == SOAP_TYPE_ns__StationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__StationInfo(struct soap *soap, const char *URL, ns__StationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StationInfo", p->soap_type() == SOAP_TYPE_ns__StationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__StationInfo(struct soap *soap, const char *URL, ns__StationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:StationInfo", p->soap_type() == SOAP_TYPE_ns__StationInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__StationInfo * SOAP_FMAC4 soap_get_ns__StationInfo(struct soap*, ns__StationInfo *, const char*, const char*);

inline int soap_read_ns__StationInfo(struct soap *soap, ns__StationInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__StationInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__StationInfo(struct soap *soap, const char *URL, ns__StationInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__StationInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__StationInfo(struct soap *soap, ns__StationInfo *p)
{
	if (::soap_read_ns__StationInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__ArrayOfBriefData_DEFINED
#define SOAP_TYPE_ns__ArrayOfBriefData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ArrayOfBriefData(struct soap*, const char*, int, const ns__ArrayOfBriefData *, const char*);
SOAP_FMAC3 ns__ArrayOfBriefData * SOAP_FMAC4 soap_in_ns__ArrayOfBriefData(struct soap*, const char*, ns__ArrayOfBriefData *, const char*);
SOAP_FMAC1 ns__ArrayOfBriefData * SOAP_FMAC2 soap_instantiate_ns__ArrayOfBriefData(struct soap*, int, const char*, const char*, size_t*);

inline ns__ArrayOfBriefData * soap_new_ns__ArrayOfBriefData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__ArrayOfBriefData(soap, n, NULL, NULL, NULL);
}

inline ns__ArrayOfBriefData * soap_new_req_ns__ArrayOfBriefData(
	struct soap *soap)
{
	ns__ArrayOfBriefData *_p = ::soap_new_ns__ArrayOfBriefData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns__ArrayOfBriefData * soap_new_set_ns__ArrayOfBriefData(
	struct soap *soap,
	const std::vector<ns__BriefData *> & BriefData)
{
	ns__ArrayOfBriefData *_p = ::soap_new_ns__ArrayOfBriefData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__ArrayOfBriefData::BriefData = BriefData;
	}
	return _p;
}

inline int soap_write_ns__ArrayOfBriefData(struct soap *soap, ns__ArrayOfBriefData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfBriefData", p->soap_type() == SOAP_TYPE_ns__ArrayOfBriefData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__ArrayOfBriefData(struct soap *soap, const char *URL, ns__ArrayOfBriefData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfBriefData", p->soap_type() == SOAP_TYPE_ns__ArrayOfBriefData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__ArrayOfBriefData(struct soap *soap, const char *URL, ns__ArrayOfBriefData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfBriefData", p->soap_type() == SOAP_TYPE_ns__ArrayOfBriefData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__ArrayOfBriefData(struct soap *soap, const char *URL, ns__ArrayOfBriefData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:ArrayOfBriefData", p->soap_type() == SOAP_TYPE_ns__ArrayOfBriefData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__ArrayOfBriefData * SOAP_FMAC4 soap_get_ns__ArrayOfBriefData(struct soap*, ns__ArrayOfBriefData *, const char*, const char*);

inline int soap_read_ns__ArrayOfBriefData(struct soap *soap, ns__ArrayOfBriefData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__ArrayOfBriefData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__ArrayOfBriefData(struct soap *soap, const char *URL, ns__ArrayOfBriefData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__ArrayOfBriefData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__ArrayOfBriefData(struct soap *soap, ns__ArrayOfBriefData *p)
{
	if (::soap_read_ns__ArrayOfBriefData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__BriefData_DEFINED
#define SOAP_TYPE_ns__BriefData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__BriefData(struct soap*, const char*, int, const ns__BriefData *, const char*);
SOAP_FMAC3 ns__BriefData * SOAP_FMAC4 soap_in_ns__BriefData(struct soap*, const char*, ns__BriefData *, const char*);
SOAP_FMAC1 ns__BriefData * SOAP_FMAC2 soap_instantiate_ns__BriefData(struct soap*, int, const char*, const char*, size_t*);

inline ns__BriefData * soap_new_ns__BriefData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__BriefData(soap, n, NULL, NULL, NULL);
}

inline ns__BriefData * soap_new_req_ns__BriefData(
	struct soap *soap,
	const std::string& Time,
	double Value)
{
	ns__BriefData *_p = ::soap_new_ns__BriefData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__BriefData::Time = Time;
		_p->ns__BriefData::Value = Value;
	}
	return _p;
}

inline ns__BriefData * soap_new_set_ns__BriefData(
	struct soap *soap,
	const std::string& Time,
	double Value)
{
	ns__BriefData *_p = ::soap_new_ns__BriefData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns__BriefData::Time = Time;
		_p->ns__BriefData::Value = Value;
	}
	return _p;
}

inline int soap_write_ns__BriefData(struct soap *soap, ns__BriefData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:BriefData", p->soap_type() == SOAP_TYPE_ns__BriefData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__BriefData(struct soap *soap, const char *URL, ns__BriefData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:BriefData", p->soap_type() == SOAP_TYPE_ns__BriefData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__BriefData(struct soap *soap, const char *URL, ns__BriefData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:BriefData", p->soap_type() == SOAP_TYPE_ns__BriefData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__BriefData(struct soap *soap, const char *URL, ns__BriefData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns:BriefData", p->soap_type() == SOAP_TYPE_ns__BriefData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns__BriefData * SOAP_FMAC4 soap_get_ns__BriefData(struct soap*, ns__BriefData *, const char*, const char*);

inline int soap_read_ns__BriefData(struct soap *soap, ns__BriefData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns__BriefData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__BriefData(struct soap *soap, const char *URL, ns__BriefData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__BriefData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__BriefData(struct soap *soap, ns__BriefData *p)
{
	if (::soap_read_ns__BriefData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns__GetHistoricalDataBrief_DEFINED
#define SOAP_TYPE_ns__GetHistoricalDataBrief_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetHistoricalDataBrief(struct soap*, struct ns__GetHistoricalDataBrief *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetHistoricalDataBrief(struct soap*, const struct ns__GetHistoricalDataBrief *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetHistoricalDataBrief(struct soap*, const char*, int, const struct ns__GetHistoricalDataBrief *, const char*);
SOAP_FMAC3 struct ns__GetHistoricalDataBrief * SOAP_FMAC4 soap_in_ns__GetHistoricalDataBrief(struct soap*, const char*, struct ns__GetHistoricalDataBrief *, const char*);
SOAP_FMAC1 struct ns__GetHistoricalDataBrief * SOAP_FMAC2 soap_instantiate_ns__GetHistoricalDataBrief(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetHistoricalDataBrief * soap_new_ns__GetHistoricalDataBrief(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetHistoricalDataBrief(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetHistoricalDataBrief * soap_new_req_ns__GetHistoricalDataBrief(
	struct soap *soap,
	const std::string& login,
	const std::string& password,
	int AveragePeriod,
	const std::string& From,
	const std::string& To)
{
	struct ns__GetHistoricalDataBrief *_p = ::soap_new_ns__GetHistoricalDataBrief(soap);
	if (_p)
	{	::soap_default_ns__GetHistoricalDataBrief(soap, _p);
		_p->login = login;
		_p->password = password;
		_p->AveragePeriod = AveragePeriod;
		_p->From = From;
		_p->To = To;
	}
	return _p;
}

inline struct ns__GetHistoricalDataBrief * soap_new_set_ns__GetHistoricalDataBrief(
	struct soap *soap,
	const std::string& login,
	const std::string& password,
	int AveragePeriod,
	ns__ArrayOfSensors *sSensors,
	const std::string& From,
	const std::string& To)
{
	struct ns__GetHistoricalDataBrief *_p = ::soap_new_ns__GetHistoricalDataBrief(soap);
	if (_p)
	{	::soap_default_ns__GetHistoricalDataBrief(soap, _p);
		_p->login = login;
		_p->password = password;
		_p->AveragePeriod = AveragePeriod;
		_p->sSensors = sSensors;
		_p->From = From;
		_p->To = To;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetHistoricalDataBrief(struct soap*, const struct ns__GetHistoricalDataBrief *, const char*, const char*);

inline int soap_write_ns__GetHistoricalDataBrief(struct soap *soap, struct ns__GetHistoricalDataBrief const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetHistoricalDataBrief(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBrief(soap, p, "ns:GetHistoricalDataBrief", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetHistoricalDataBrief(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBrief const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBrief(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBrief(soap, p, "ns:GetHistoricalDataBrief", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetHistoricalDataBrief(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBrief const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBrief(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBrief(soap, p, "ns:GetHistoricalDataBrief", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetHistoricalDataBrief(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBrief const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBrief(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBrief(soap, p, "ns:GetHistoricalDataBrief", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetHistoricalDataBrief * SOAP_FMAC4 soap_get_ns__GetHistoricalDataBrief(struct soap*, struct ns__GetHistoricalDataBrief *, const char*, const char*);

inline int soap_read_ns__GetHistoricalDataBrief(struct soap *soap, struct ns__GetHistoricalDataBrief *p)
{
	if (p)
	{	::soap_default_ns__GetHistoricalDataBrief(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetHistoricalDataBrief(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetHistoricalDataBrief(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBrief *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetHistoricalDataBrief(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetHistoricalDataBrief(struct soap *soap, struct ns__GetHistoricalDataBrief *p)
{
	if (::soap_read_ns__GetHistoricalDataBrief(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__GetHistoricalDataBriefResponse_DEFINED
#define SOAP_TYPE_ns__GetHistoricalDataBriefResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetHistoricalDataBriefResponse(struct soap*, struct ns__GetHistoricalDataBriefResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetHistoricalDataBriefResponse(struct soap*, const struct ns__GetHistoricalDataBriefResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetHistoricalDataBriefResponse(struct soap*, const char*, int, const struct ns__GetHistoricalDataBriefResponse *, const char*);
SOAP_FMAC3 struct ns__GetHistoricalDataBriefResponse * SOAP_FMAC4 soap_in_ns__GetHistoricalDataBriefResponse(struct soap*, const char*, struct ns__GetHistoricalDataBriefResponse *, const char*);
SOAP_FMAC1 struct ns__GetHistoricalDataBriefResponse * SOAP_FMAC2 soap_instantiate_ns__GetHistoricalDataBriefResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetHistoricalDataBriefResponse * soap_new_ns__GetHistoricalDataBriefResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetHistoricalDataBriefResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetHistoricalDataBriefResponse * soap_new_req_ns__GetHistoricalDataBriefResponse(
	struct soap *soap,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetHistoricalDataBriefResponse *_p = ::soap_new_ns__GetHistoricalDataBriefResponse(soap);
	if (_p)
	{	::soap_default_ns__GetHistoricalDataBriefResponse(soap, _p);
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}

inline struct ns__GetHistoricalDataBriefResponse * soap_new_set_ns__GetHistoricalDataBriefResponse(
	struct soap *soap,
	ns__ArrayOfSensorData *GetHistoricalDataBriefResult,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetHistoricalDataBriefResponse *_p = ::soap_new_ns__GetHistoricalDataBriefResponse(soap);
	if (_p)
	{	::soap_default_ns__GetHistoricalDataBriefResponse(soap, _p);
		_p->GetHistoricalDataBriefResult = GetHistoricalDataBriefResult;
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetHistoricalDataBriefResponse(struct soap*, const struct ns__GetHistoricalDataBriefResponse *, const char*, const char*);

inline int soap_write_ns__GetHistoricalDataBriefResponse(struct soap *soap, struct ns__GetHistoricalDataBriefResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetHistoricalDataBriefResponse(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBriefResponse(soap, p, "ns:GetHistoricalDataBriefResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetHistoricalDataBriefResponse(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBriefResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBriefResponse(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBriefResponse(soap, p, "ns:GetHistoricalDataBriefResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetHistoricalDataBriefResponse(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBriefResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBriefResponse(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBriefResponse(soap, p, "ns:GetHistoricalDataBriefResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetHistoricalDataBriefResponse(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBriefResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetHistoricalDataBriefResponse(soap, p), 0) || ::soap_put_ns__GetHistoricalDataBriefResponse(soap, p, "ns:GetHistoricalDataBriefResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetHistoricalDataBriefResponse * SOAP_FMAC4 soap_get_ns__GetHistoricalDataBriefResponse(struct soap*, struct ns__GetHistoricalDataBriefResponse *, const char*, const char*);

inline int soap_read_ns__GetHistoricalDataBriefResponse(struct soap *soap, struct ns__GetHistoricalDataBriefResponse *p)
{
	if (p)
	{	::soap_default_ns__GetHistoricalDataBriefResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetHistoricalDataBriefResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetHistoricalDataBriefResponse(struct soap *soap, const char *URL, struct ns__GetHistoricalDataBriefResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetHistoricalDataBriefResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetHistoricalDataBriefResponse(struct soap *soap, struct ns__GetHistoricalDataBriefResponse *p)
{
	if (::soap_read_ns__GetHistoricalDataBriefResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__GetSensors_DEFINED
#define SOAP_TYPE_ns__GetSensors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetSensors(struct soap*, struct ns__GetSensors *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetSensors(struct soap*, const struct ns__GetSensors *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetSensors(struct soap*, const char*, int, const struct ns__GetSensors *, const char*);
SOAP_FMAC3 struct ns__GetSensors * SOAP_FMAC4 soap_in_ns__GetSensors(struct soap*, const char*, struct ns__GetSensors *, const char*);
SOAP_FMAC1 struct ns__GetSensors * SOAP_FMAC2 soap_instantiate_ns__GetSensors(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetSensors * soap_new_ns__GetSensors(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetSensors(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetSensors * soap_new_req_ns__GetSensors(
	struct soap *soap,
	const std::string& login,
	const std::string& password,
	const std::string& StationID,
	const std::string& From,
	const std::string& To)
{
	struct ns__GetSensors *_p = ::soap_new_ns__GetSensors(soap);
	if (_p)
	{	::soap_default_ns__GetSensors(soap, _p);
		_p->login = login;
		_p->password = password;
		_p->StationID = StationID;
		_p->From = From;
		_p->To = To;
	}
	return _p;
}

inline struct ns__GetSensors * soap_new_set_ns__GetSensors(
	struct soap *soap,
	const std::string& login,
	const std::string& password,
	const std::string& StationID,
	const std::string& From,
	const std::string& To)
{
	struct ns__GetSensors *_p = ::soap_new_ns__GetSensors(soap);
	if (_p)
	{	::soap_default_ns__GetSensors(soap, _p);
		_p->login = login;
		_p->password = password;
		_p->StationID = StationID;
		_p->From = From;
		_p->To = To;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetSensors(struct soap*, const struct ns__GetSensors *, const char*, const char*);

inline int soap_write_ns__GetSensors(struct soap *soap, struct ns__GetSensors const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetSensors(soap, p), 0) || ::soap_put_ns__GetSensors(soap, p, "ns:GetSensors", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetSensors(struct soap *soap, const char *URL, struct ns__GetSensors const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensors(soap, p), 0) || ::soap_put_ns__GetSensors(soap, p, "ns:GetSensors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetSensors(struct soap *soap, const char *URL, struct ns__GetSensors const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensors(soap, p), 0) || ::soap_put_ns__GetSensors(soap, p, "ns:GetSensors", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetSensors(struct soap *soap, const char *URL, struct ns__GetSensors const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensors(soap, p), 0) || ::soap_put_ns__GetSensors(soap, p, "ns:GetSensors", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetSensors * SOAP_FMAC4 soap_get_ns__GetSensors(struct soap*, struct ns__GetSensors *, const char*, const char*);

inline int soap_read_ns__GetSensors(struct soap *soap, struct ns__GetSensors *p)
{
	if (p)
	{	::soap_default_ns__GetSensors(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetSensors(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetSensors(struct soap *soap, const char *URL, struct ns__GetSensors *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetSensors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetSensors(struct soap *soap, struct ns__GetSensors *p)
{
	if (::soap_read_ns__GetSensors(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__GetSensorsResponse_DEFINED
#define SOAP_TYPE_ns__GetSensorsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetSensorsResponse(struct soap*, struct ns__GetSensorsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetSensorsResponse(struct soap*, const struct ns__GetSensorsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetSensorsResponse(struct soap*, const char*, int, const struct ns__GetSensorsResponse *, const char*);
SOAP_FMAC3 struct ns__GetSensorsResponse * SOAP_FMAC4 soap_in_ns__GetSensorsResponse(struct soap*, const char*, struct ns__GetSensorsResponse *, const char*);
SOAP_FMAC1 struct ns__GetSensorsResponse * SOAP_FMAC2 soap_instantiate_ns__GetSensorsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetSensorsResponse * soap_new_ns__GetSensorsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetSensorsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetSensorsResponse * soap_new_req_ns__GetSensorsResponse(
	struct soap *soap,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetSensorsResponse *_p = ::soap_new_ns__GetSensorsResponse(soap);
	if (_p)
	{	::soap_default_ns__GetSensorsResponse(soap, _p);
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}

inline struct ns__GetSensorsResponse * soap_new_set_ns__GetSensorsResponse(
	struct soap *soap,
	ns__ArrayOfSensorsInfo *GetSensorsResult,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetSensorsResponse *_p = ::soap_new_ns__GetSensorsResponse(soap);
	if (_p)
	{	::soap_default_ns__GetSensorsResponse(soap, _p);
		_p->GetSensorsResult = GetSensorsResult;
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetSensorsResponse(struct soap*, const struct ns__GetSensorsResponse *, const char*, const char*);

inline int soap_write_ns__GetSensorsResponse(struct soap *soap, struct ns__GetSensorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetSensorsResponse(soap, p), 0) || ::soap_put_ns__GetSensorsResponse(soap, p, "ns:GetSensorsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetSensorsResponse(struct soap *soap, const char *URL, struct ns__GetSensorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensorsResponse(soap, p), 0) || ::soap_put_ns__GetSensorsResponse(soap, p, "ns:GetSensorsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetSensorsResponse(struct soap *soap, const char *URL, struct ns__GetSensorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensorsResponse(soap, p), 0) || ::soap_put_ns__GetSensorsResponse(soap, p, "ns:GetSensorsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetSensorsResponse(struct soap *soap, const char *URL, struct ns__GetSensorsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetSensorsResponse(soap, p), 0) || ::soap_put_ns__GetSensorsResponse(soap, p, "ns:GetSensorsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetSensorsResponse * SOAP_FMAC4 soap_get_ns__GetSensorsResponse(struct soap*, struct ns__GetSensorsResponse *, const char*, const char*);

inline int soap_read_ns__GetSensorsResponse(struct soap *soap, struct ns__GetSensorsResponse *p)
{
	if (p)
	{	::soap_default_ns__GetSensorsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetSensorsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetSensorsResponse(struct soap *soap, const char *URL, struct ns__GetSensorsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetSensorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetSensorsResponse(struct soap *soap, struct ns__GetSensorsResponse *p)
{
	if (::soap_read_ns__GetSensorsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__GetStations_DEFINED
#define SOAP_TYPE_ns__GetStations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetStations(struct soap*, struct ns__GetStations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetStations(struct soap*, const struct ns__GetStations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetStations(struct soap*, const char*, int, const struct ns__GetStations *, const char*);
SOAP_FMAC3 struct ns__GetStations * SOAP_FMAC4 soap_in_ns__GetStations(struct soap*, const char*, struct ns__GetStations *, const char*);
SOAP_FMAC1 struct ns__GetStations * SOAP_FMAC2 soap_instantiate_ns__GetStations(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetStations * soap_new_ns__GetStations(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetStations(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetStations * soap_new_req_ns__GetStations(
	struct soap *soap,
	const std::string& login,
	const std::string& password)
{
	struct ns__GetStations *_p = ::soap_new_ns__GetStations(soap);
	if (_p)
	{	::soap_default_ns__GetStations(soap, _p);
		_p->login = login;
		_p->password = password;
	}
	return _p;
}

inline struct ns__GetStations * soap_new_set_ns__GetStations(
	struct soap *soap,
	const std::string& login,
	const std::string& password)
{
	struct ns__GetStations *_p = ::soap_new_ns__GetStations(soap);
	if (_p)
	{	::soap_default_ns__GetStations(soap, _p);
		_p->login = login;
		_p->password = password;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetStations(struct soap*, const struct ns__GetStations *, const char*, const char*);

inline int soap_write_ns__GetStations(struct soap *soap, struct ns__GetStations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetStations(soap, p), 0) || ::soap_put_ns__GetStations(soap, p, "ns:GetStations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetStations(struct soap *soap, const char *URL, struct ns__GetStations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStations(soap, p), 0) || ::soap_put_ns__GetStations(soap, p, "ns:GetStations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetStations(struct soap *soap, const char *URL, struct ns__GetStations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStations(soap, p), 0) || ::soap_put_ns__GetStations(soap, p, "ns:GetStations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetStations(struct soap *soap, const char *URL, struct ns__GetStations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStations(soap, p), 0) || ::soap_put_ns__GetStations(soap, p, "ns:GetStations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetStations * SOAP_FMAC4 soap_get_ns__GetStations(struct soap*, struct ns__GetStations *, const char*, const char*);

inline int soap_read_ns__GetStations(struct soap *soap, struct ns__GetStations *p)
{
	if (p)
	{	::soap_default_ns__GetStations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetStations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetStations(struct soap *soap, const char *URL, struct ns__GetStations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetStations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetStations(struct soap *soap, struct ns__GetStations *p)
{
	if (::soap_read_ns__GetStations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns__GetStationsResponse_DEFINED
#define SOAP_TYPE_ns__GetStationsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetStationsResponse(struct soap*, struct ns__GetStationsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetStationsResponse(struct soap*, const struct ns__GetStationsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetStationsResponse(struct soap*, const char*, int, const struct ns__GetStationsResponse *, const char*);
SOAP_FMAC3 struct ns__GetStationsResponse * SOAP_FMAC4 soap_in_ns__GetStationsResponse(struct soap*, const char*, struct ns__GetStationsResponse *, const char*);
SOAP_FMAC1 struct ns__GetStationsResponse * SOAP_FMAC2 soap_instantiate_ns__GetStationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetStationsResponse * soap_new_ns__GetStationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns__GetStationsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns__GetStationsResponse * soap_new_req_ns__GetStationsResponse(
	struct soap *soap,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetStationsResponse *_p = ::soap_new_ns__GetStationsResponse(soap);
	if (_p)
	{	::soap_default_ns__GetStationsResponse(soap, _p);
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}

inline struct ns__GetStationsResponse * soap_new_set_ns__GetStationsResponse(
	struct soap *soap,
	ns__ArrayOfStationInfo *GetStationsResult,
	enum ns__ErrorCode ErrorCode)
{
	struct ns__GetStationsResponse *_p = ::soap_new_ns__GetStationsResponse(soap);
	if (_p)
	{	::soap_default_ns__GetStationsResponse(soap, _p);
		_p->GetStationsResult = GetStationsResult;
		_p->ErrorCode = ErrorCode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetStationsResponse(struct soap*, const struct ns__GetStationsResponse *, const char*, const char*);

inline int soap_write_ns__GetStationsResponse(struct soap *soap, struct ns__GetStationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns__GetStationsResponse(soap, p), 0) || ::soap_put_ns__GetStationsResponse(soap, p, "ns:GetStationsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns__GetStationsResponse(struct soap *soap, const char *URL, struct ns__GetStationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStationsResponse(soap, p), 0) || ::soap_put_ns__GetStationsResponse(soap, p, "ns:GetStationsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns__GetStationsResponse(struct soap *soap, const char *URL, struct ns__GetStationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStationsResponse(soap, p), 0) || ::soap_put_ns__GetStationsResponse(soap, p, "ns:GetStationsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns__GetStationsResponse(struct soap *soap, const char *URL, struct ns__GetStationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns__GetStationsResponse(soap, p), 0) || ::soap_put_ns__GetStationsResponse(soap, p, "ns:GetStationsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns__GetStationsResponse * SOAP_FMAC4 soap_get_ns__GetStationsResponse(struct soap*, struct ns__GetStationsResponse *, const char*, const char*);

inline int soap_read_ns__GetStationsResponse(struct soap *soap, struct ns__GetStationsResponse *p)
{
	if (p)
	{	::soap_default_ns__GetStationsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns__GetStationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns__GetStationsResponse(struct soap *soap, const char *URL, struct ns__GetStationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns__GetStationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns__GetStationsResponse(struct soap *soap, struct ns__GetStationsResponse *p)
{
	if (::soap_read_ns__GetStationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons__ArrayOfSensors_DEFINED
#define SOAP_TYPE_PointerTons__ArrayOfSensors_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ArrayOfSensors(struct soap*, ns__ArrayOfSensors *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ArrayOfSensors(struct soap*, const char *, int, ns__ArrayOfSensors *const*, const char *);
SOAP_FMAC3 ns__ArrayOfSensors ** SOAP_FMAC4 soap_in_PointerTons__ArrayOfSensors(struct soap*, const char*, ns__ArrayOfSensors **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ArrayOfSensors(struct soap*, ns__ArrayOfSensors *const*, const char*, const char*);
SOAP_FMAC3 ns__ArrayOfSensors ** SOAP_FMAC4 soap_get_PointerTons__ArrayOfSensors(struct soap*, ns__ArrayOfSensors **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__ArrayOfSensorData_DEFINED
#define SOAP_TYPE_PointerTons__ArrayOfSensorData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ArrayOfSensorData(struct soap*, ns__ArrayOfSensorData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ArrayOfSensorData(struct soap*, const char *, int, ns__ArrayOfSensorData *const*, const char *);
SOAP_FMAC3 ns__ArrayOfSensorData ** SOAP_FMAC4 soap_in_PointerTons__ArrayOfSensorData(struct soap*, const char*, ns__ArrayOfSensorData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ArrayOfSensorData(struct soap*, ns__ArrayOfSensorData *const*, const char*, const char*);
SOAP_FMAC3 ns__ArrayOfSensorData ** SOAP_FMAC4 soap_get_PointerTons__ArrayOfSensorData(struct soap*, ns__ArrayOfSensorData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__ArrayOfSensorsInfo_DEFINED
#define SOAP_TYPE_PointerTons__ArrayOfSensorsInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ArrayOfSensorsInfo(struct soap*, ns__ArrayOfSensorsInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ArrayOfSensorsInfo(struct soap*, const char *, int, ns__ArrayOfSensorsInfo *const*, const char *);
SOAP_FMAC3 ns__ArrayOfSensorsInfo ** SOAP_FMAC4 soap_in_PointerTons__ArrayOfSensorsInfo(struct soap*, const char*, ns__ArrayOfSensorsInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ArrayOfSensorsInfo(struct soap*, ns__ArrayOfSensorsInfo *const*, const char*, const char*);
SOAP_FMAC3 ns__ArrayOfSensorsInfo ** SOAP_FMAC4 soap_get_PointerTons__ArrayOfSensorsInfo(struct soap*, ns__ArrayOfSensorsInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__ArrayOfStationInfo_DEFINED
#define SOAP_TYPE_PointerTons__ArrayOfStationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ArrayOfStationInfo(struct soap*, ns__ArrayOfStationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ArrayOfStationInfo(struct soap*, const char *, int, ns__ArrayOfStationInfo *const*, const char *);
SOAP_FMAC3 ns__ArrayOfStationInfo ** SOAP_FMAC4 soap_in_PointerTons__ArrayOfStationInfo(struct soap*, const char*, ns__ArrayOfStationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ArrayOfStationInfo(struct soap*, ns__ArrayOfStationInfo *const*, const char*, const char*);
SOAP_FMAC3 ns__ArrayOfStationInfo ** SOAP_FMAC4 soap_get_PointerTons__ArrayOfStationInfo(struct soap*, ns__ArrayOfStationInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__SensorData_DEFINED
#define SOAP_TYPE_PointerTons__SensorData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__SensorData(struct soap*, ns__SensorData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__SensorData(struct soap*, const char *, int, ns__SensorData *const*, const char *);
SOAP_FMAC3 ns__SensorData ** SOAP_FMAC4 soap_in_PointerTons__SensorData(struct soap*, const char*, ns__SensorData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__SensorData(struct soap*, ns__SensorData *const*, const char*, const char*);
SOAP_FMAC3 ns__SensorData ** SOAP_FMAC4 soap_get_PointerTons__SensorData(struct soap*, ns__SensorData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__SensorInfo_DEFINED
#define SOAP_TYPE_PointerTons__SensorInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__SensorInfo(struct soap*, ns__SensorInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__SensorInfo(struct soap*, const char *, int, ns__SensorInfo *const*, const char *);
SOAP_FMAC3 ns__SensorInfo ** SOAP_FMAC4 soap_in_PointerTons__SensorInfo(struct soap*, const char*, ns__SensorInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__SensorInfo(struct soap*, ns__SensorInfo *const*, const char*, const char*);
SOAP_FMAC3 ns__SensorInfo ** SOAP_FMAC4 soap_get_PointerTons__SensorInfo(struct soap*, ns__SensorInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__StationInfo_DEFINED
#define SOAP_TYPE_PointerTons__StationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__StationInfo(struct soap*, ns__StationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__StationInfo(struct soap*, const char *, int, ns__StationInfo *const*, const char *);
SOAP_FMAC3 ns__StationInfo ** SOAP_FMAC4 soap_in_PointerTons__StationInfo(struct soap*, const char*, ns__StationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__StationInfo(struct soap*, ns__StationInfo *const*, const char*, const char*);
SOAP_FMAC3 ns__StationInfo ** SOAP_FMAC4 soap_get_PointerTons__StationInfo(struct soap*, ns__StationInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__ArrayOfBriefData_DEFINED
#define SOAP_TYPE_PointerTons__ArrayOfBriefData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ArrayOfBriefData(struct soap*, ns__ArrayOfBriefData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ArrayOfBriefData(struct soap*, const char *, int, ns__ArrayOfBriefData *const*, const char *);
SOAP_FMAC3 ns__ArrayOfBriefData ** SOAP_FMAC4 soap_in_PointerTons__ArrayOfBriefData(struct soap*, const char*, ns__ArrayOfBriefData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ArrayOfBriefData(struct soap*, ns__ArrayOfBriefData *const*, const char*, const char*);
SOAP_FMAC3 ns__ArrayOfBriefData ** SOAP_FMAC4 soap_get_PointerTons__ArrayOfBriefData(struct soap*, ns__ArrayOfBriefData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__UnitInfo_DEFINED
#define SOAP_TYPE_PointerTons__UnitInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__UnitInfo(struct soap*, ns__UnitInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__UnitInfo(struct soap*, const char *, int, ns__UnitInfo *const*, const char *);
SOAP_FMAC3 ns__UnitInfo ** SOAP_FMAC4 soap_in_PointerTons__UnitInfo(struct soap*, const char*, ns__UnitInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__UnitInfo(struct soap*, ns__UnitInfo *const*, const char*, const char*);
SOAP_FMAC3 ns__UnitInfo ** SOAP_FMAC4 soap_get_PointerTons__UnitInfo(struct soap*, ns__UnitInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons__BriefData_DEFINED
#define SOAP_TYPE_PointerTons__BriefData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__BriefData(struct soap*, ns__BriefData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__BriefData(struct soap*, const char *, int, ns__BriefData *const*, const char *);
SOAP_FMAC3 ns__BriefData ** SOAP_FMAC4 soap_in_PointerTons__BriefData(struct soap*, const char*, ns__BriefData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__BriefData(struct soap*, ns__BriefData *const*, const char*, const char*);
SOAP_FMAC3 ns__BriefData ** SOAP_FMAC4 soap_get_PointerTons__BriefData(struct soap*, ns__BriefData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons__SensorData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons__SensorData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons__SensorData(struct soap*, std::vector<ns__SensorData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons__SensorData(struct soap*, const std::vector<ns__SensorData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons__SensorData(struct soap*, const char*, int, const std::vector<ns__SensorData *> *, const char*);
SOAP_FMAC3 std::vector<ns__SensorData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons__SensorData(struct soap*, const char*, std::vector<ns__SensorData *> *, const char*);
SOAP_FMAC1 std::vector<ns__SensorData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons__SensorData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__SensorData *>  * soap_new_std__vectorTemplateOfPointerTons__SensorData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons__SensorData(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons__SensorInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons__SensorInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons__SensorInfo(struct soap*, std::vector<ns__SensorInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons__SensorInfo(struct soap*, const std::vector<ns__SensorInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons__SensorInfo(struct soap*, const char*, int, const std::vector<ns__SensorInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns__SensorInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons__SensorInfo(struct soap*, const char*, std::vector<ns__SensorInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns__SensorInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons__SensorInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__SensorInfo *>  * soap_new_std__vectorTemplateOfPointerTons__SensorInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons__SensorInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons__StationInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons__StationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons__StationInfo(struct soap*, std::vector<ns__StationInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons__StationInfo(struct soap*, const std::vector<ns__StationInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons__StationInfo(struct soap*, const char*, int, const std::vector<ns__StationInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns__StationInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons__StationInfo(struct soap*, const char*, std::vector<ns__StationInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns__StationInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons__StationInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__StationInfo *>  * soap_new_std__vectorTemplateOfPointerTons__StationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons__StationInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons__BriefData_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons__BriefData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons__BriefData(struct soap*, std::vector<ns__BriefData *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons__BriefData(struct soap*, const std::vector<ns__BriefData *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons__BriefData(struct soap*, const char*, int, const std::vector<ns__BriefData *> *, const char*);
SOAP_FMAC3 std::vector<ns__BriefData *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons__BriefData(struct soap*, const char*, std::vector<ns__BriefData *> *, const char*);
SOAP_FMAC1 std::vector<ns__BriefData *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons__BriefData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__BriefData *>  * soap_new_std__vectorTemplateOfPointerTons__BriefData(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons__BriefData(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
