/* soapReplicationApiServiceService.h
   Generated by gSOAP 2.8.75 for replicator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapReplicationApiServiceService_H
#define soapReplicationApiServiceService_H
#include "soapH.h"

    class SOAP_CMAC ReplicationApiServiceService : public soap {
      public:
        /// Variables globally declared in replicator.h, if any
        /// Construct a service with new managing context
        ReplicationApiServiceService();
        /// Copy constructor
        ReplicationApiServiceService(const ReplicationApiServiceService&);
        /// Construct service given a managing context
        ReplicationApiServiceService(const struct soap&);
        /// Construct service given a managing context and endpoint
        ReplicationApiServiceService(const struct soap&, const char *soap_endpoint_url);
        /// Constructor taking input+output mode flags for the new managing context
        ReplicationApiServiceService(soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        ReplicationApiServiceService(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context
        virtual ~ReplicationApiServiceService();
        /// Delete all deserialized data (with soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to defaults
        virtual void reset();
        /// Initializer used by constructors
        virtual void ReplicationApiServiceService_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual ReplicationApiServiceService *copy() SOAP_PURE_VIRTUAL_COPY;
        /// Copy assignment
        ReplicationApiServiceService& operator=(const ReplicationApiServiceService&);
        /// Close connection (normally automatic)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Return sender-related fault to sender
        virtual int soap_senderfault(const char *string, const char *detailXML);
        /// Return sender-related fault with SOAP 1.2 subcode to sender
        virtual int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
        /// Return receiver-related fault to sender
        virtual int soap_receiverfault(const char *string, const char *detailXML);
        /// Return receiver-related fault with SOAP 1.2 subcode to sender
        virtual int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
    #ifndef WITH_NOIO
        /// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns SOAP_OK or error code), use this->bind_flag = SO_REUSEADDR to rebind for immediate rerun
        virtual int run(int port, int backlog = 1);
    #if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
        /// Run simple single-thread SSL service on port until a connection error occurs (returns SOAP_OK or error code), use this->bind_flag = SO_REUSEADDR to rebind for immediate rerun
        virtual int ssl_run(int port, int backlog = 1);
    #endif
        /// Bind service to port (returns master socket or SOAP_INVALID_SOCKET upon error)
        virtual SOAP_SOCKET bind(const char *host, int port, int backlog);
        /// Accept next request (returns socket or SOAP_INVALID_SOCKET upon error)
        virtual SOAP_SOCKET accept();
    #if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
        /// When SSL is used, after accept() should perform and accept SSL handshake
        virtual int ssl_accept();
    #endif
    #endif
        /// After accept() serve the pending request (returns SOAP_OK or error code)
        virtual int serve();
        /// Used by serve() to dispatch a pending request (returns SOAP_OK or error code)
        virtual int dispatch();
        //
        // Service operations are listed below: you should define these
        // Note: compile with -DWITH_PURE_VIRTUAL to declare pure virtual methods
        //
        /// Web service operation 'GetStations' implementation, should return SOAP_OK or error code
        virtual int GetStations(struct soap *soap, const std::wstring& login, const std::wstring& password, ns__GetStationsResponse &result) SOAP_PURE_VIRTUAL;
        //
        /// Web service operation 'GetSensors' implementation, should return SOAP_OK or error code
        virtual int GetSensors(struct soap *soap, const std::wstring& login, const std::wstring& password, const std::wstring& StationID, const std::wstring& From, const std::wstring& To, ns__GetSensorsResponse &result) SOAP_PURE_VIRTUAL;
        //
        /// Web service operation 'GetHistoricalDataBrief' implementation, should return SOAP_OK or error code
        virtual int GetHistoricalDataBrief(struct soap *soap, const std::wstring& login, const std::wstring& password, int AveragePeriod, const ns__ArrayOfSensors& sSensors, const std::wstring& From, const std::wstring& To, ns__GetHistoricalDataBriefResponse &result) SOAP_PURE_VIRTUAL;
    };
#endif
