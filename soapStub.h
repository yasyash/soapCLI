/* soapStub.h
   Generated by gSOAP 2.8.75 for replicator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20875
# error "GSOAP VERSION 20875 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* replicator.h:15 */
#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (10)
/* ns:ErrorCode */
enum ns__ErrorCode {
	ns__NO_ERROR_AUTHORIZATION = 0,
	ns__AUTHORIZATION_ERROR_IS = 1
};
#endif

/* replicator.h:20 */
#ifndef SOAP_TYPE_ns__UserAccessRightCode
#define SOAP_TYPE_ns__UserAccessRightCode (11)
/* ns:UserAccessRightCode */
enum ns__UserAccessRightCode {
	NONE = 0,
	VIEW = 1,
	EDIT = 2,
	DELETE = 3
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns__StationInfo;	/* replicator.h:27 */
class ns__ArrayOfStationInfo;	/* replicator.h:38 */
class ns__GetStationsResponse;	/* replicator.h:44 */
class ns__StInfo;	/* replicator.h:52 */
struct ns__GetStations;	/* replicator.h:61 */
struct ns__GetStationsResp;	/* replicator.h:62 */

/* replicator.h:27 */
#ifndef SOAP_TYPE_ns__StationInfo
#define SOAP_TYPE_ns__StationInfo (12)
/* complex XML schema type 'ns:StationInfo': */
class SOAP_CMAC ns__StationInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Code' of XML schema type 'xsd:int'
        int Code;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
        /// Required element 'UpdatePeriod' of XML schema type 'xsd:int'
        int UpdatePeriod;
        /// Required element 'UserAccessRight' of XML schema type 'ns:UserAccessRightCode'
        enum ns__UserAccessRightCode UserAccessRight;
      public:
        /// Return unique type id SOAP_TYPE_ns__StationInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__StationInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__StationInfo, default initialized and not managed by a soap context
        virtual ns__StationInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__StationInfo); }
      public:
        /// Constructor with default initializations
        ns__StationInfo() : ID(), Code(), Name(), UpdatePeriod(), UserAccessRight() { }
        virtual ~ns__StationInfo() { }
        /// Friend allocator used by soap_new_ns__StationInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__StationInfo * SOAP_FMAC2 soap_instantiate_ns__StationInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:38 */
#ifndef SOAP_TYPE_ns__ArrayOfStationInfo
#define SOAP_TYPE_ns__ArrayOfStationInfo (13)
/* complex XML schema type 'ns:ArrayOfStationInfo': */
class SOAP_CMAC ns__ArrayOfStationInfo {
      public:
        /// Optional element 'StationsInfo' of XML schema type 'ns:StationInfo'
        std::vector<ns__StationInfo> StationsInfo;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfStationInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfStationInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfStationInfo, default initialized and not managed by a soap context
        virtual ns__ArrayOfStationInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfStationInfo); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfStationInfo() : StationsInfo() { }
        virtual ~ns__ArrayOfStationInfo() { }
        /// Friend allocator used by soap_new_ns__ArrayOfStationInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfStationInfo * SOAP_FMAC2 soap_instantiate_ns__ArrayOfStationInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:44 */
#ifndef SOAP_TYPE_ns__GetStationsResponse
#define SOAP_TYPE_ns__GetStationsResponse (15)
/* complex XML schema type 'ns:GetStationsResponse': */
class SOAP_CMAC ns__GetStationsResponse {
      public:
        /// Optional element 'GetStationsResult' of XML schema type 'ns:ArrayOfStationInfo'
        ns__ArrayOfStationInfo *GetStationsResult;
        /// Required element 'ErrorCode' of XML schema type 'ns:ErrorCode'
        enum ns__ErrorCode ErrorCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns__GetStationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns__GetStationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__GetStationsResponse, default initialized and not managed by a soap context
        virtual ns__GetStationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__GetStationsResponse); }
      public:
        /// Constructor with default initializations
        ns__GetStationsResponse() : GetStationsResult(), ErrorCode(), soap() { }
        virtual ~ns__GetStationsResponse() { }
        /// Friend allocator used by soap_new_ns__GetStationsResponse(struct soap*, int)
        friend SOAP_FMAC1 ns__GetStationsResponse * SOAP_FMAC2 soap_instantiate_ns__GetStationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:52 */
#ifndef SOAP_TYPE_ns__StInfo
#define SOAP_TYPE_ns__StInfo (18)
/* complex XML schema type 'ns:StInfo': */
class SOAP_CMAC ns__StInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Code' of XML schema type 'xsd:int'
        int Code;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
        /// Required element 'UpdatePeriod' of XML schema type 'xsd:int'
        int UpdatePeriod;
        /// Required element 'UserAccessRight' of XML schema type 'ns:UserAccessRightCode'
        enum ns__UserAccessRightCode UserAccessRight;
      public:
        /// Return unique type id SOAP_TYPE_ns__StInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__StInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__StInfo, default initialized and not managed by a soap context
        virtual ns__StInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__StInfo); }
      public:
        /// Constructor with default initializations
        ns__StInfo() : ID(), Code(), Name(), UpdatePeriod(), UserAccessRight() { }
        virtual ~ns__StInfo() { }
        /// Friend allocator used by soap_new_ns__StInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__StInfo * SOAP_FMAC2 soap_instantiate_ns__StInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:61 */
#ifndef SOAP_TYPE_ns__GetStations
#define SOAP_TYPE_ns__GetStations (21)
/* complex XML schema type 'ns:GetStations': */
struct SOAP_CMAC ns__GetStations {
      public:
        /** Context that manages this object */
        struct soap *soap;
        /** Required element 'login' of XML schema type 'xsd:string' */
        std::wstring login;
        /** Required element 'password' of XML schema type 'xsd:string' */
        std::wstring password;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetStations */
        long soap_type() const { return SOAP_TYPE_ns__GetStations; }
        /** Constructor with member initializations */
        ns__GetStations() : soap(), login(), password() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns__GetStations * SOAP_FMAC2 soap_instantiate_ns__GetStations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:62 */
#ifndef SOAP_TYPE_ns__GetStationsResp
#define SOAP_TYPE_ns__GetStationsResp (24)
/* complex XML schema type 'ns:GetStationsResp': */
struct SOAP_CMAC ns__GetStationsResp {
      public:
        /** Context that manages this object */
        struct soap *soap;
        /** Required element 'login' of XML schema type 'xsd:string' */
        std::wstring login;
        /** Required element 'password' of XML schema type 'xsd:string' */
        std::wstring password;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetStationsResp */
        long soap_type() const { return SOAP_TYPE_ns__GetStationsResp; }
        /** Constructor with member initializations */
        ns__GetStationsResp() : soap(), login(), password() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns__GetStationsResp * SOAP_FMAC2 soap_instantiate_ns__GetStationsResp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:63 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (25)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:63 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (26)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:63 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (28)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:63 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (31)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:63 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (32)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* replicator.h:13 */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
typedef std::wstring xsd__string;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* enum ns__UserAccessRightCode has binding name 'ns__UserAccessRightCode' for type 'ns:UserAccessRightCode' */
#ifndef SOAP_TYPE_ns__UserAccessRightCode
#define SOAP_TYPE_ns__UserAccessRightCode (11)
#endif

/* enum ns__ErrorCode has binding name 'ns__ErrorCode' for type 'ns:ErrorCode' */
#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (10)
#endif

/* ns__StInfo has binding name 'ns__StInfo' for type 'ns:StInfo' */
#ifndef SOAP_TYPE_ns__StInfo
#define SOAP_TYPE_ns__StInfo (18)
#endif

/* ns__GetStationsResponse has binding name 'ns__GetStationsResponse' for type 'ns:GetStationsResponse' */
#ifndef SOAP_TYPE_ns__GetStationsResponse
#define SOAP_TYPE_ns__GetStationsResponse (15)
#endif

/* ns__ArrayOfStationInfo has binding name 'ns__ArrayOfStationInfo' for type 'ns:ArrayOfStationInfo' */
#ifndef SOAP_TYPE_ns__ArrayOfStationInfo
#define SOAP_TYPE_ns__ArrayOfStationInfo (13)
#endif

/* ns__StationInfo has binding name 'ns__StationInfo' for type 'ns:StationInfo' */
#ifndef SOAP_TYPE_ns__StationInfo
#define SOAP_TYPE_ns__StationInfo (12)
#endif

/* xsd__string has binding name 'xsd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
#endif

/* std::wstring has binding name 'std__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (32)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (31)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (28)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (26)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (25)
#endif

/* struct ns__GetStationsResp has binding name 'ns__GetStationsResp' for type 'ns:GetStationsResp' */
#ifndef SOAP_TYPE_ns__GetStationsResp
#define SOAP_TYPE_ns__GetStationsResp (24)
#endif

/* struct ns__GetStations has binding name 'ns__GetStations' for type 'ns:GetStations' */
#ifndef SOAP_TYPE_ns__GetStations
#define SOAP_TYPE_ns__GetStations (21)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (34)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (33)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (27)
#endif

/* ns__ArrayOfStationInfo * has binding name 'PointerTons__ArrayOfStationInfo' for type 'ns:ArrayOfStationInfo' */
#ifndef SOAP_TYPE_PointerTons__ArrayOfStationInfo
#define SOAP_TYPE_PointerTons__ArrayOfStationInfo (16)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<ns__StationInfo>  has binding name 'std__vectorTemplateOfns__StationInfo' for type 'ns:StationInfo' */
#ifndef SOAP_TYPE_std__vectorTemplateOfns__StationInfo
#define SOAP_TYPE_std__vectorTemplateOfns__StationInfo (14)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
