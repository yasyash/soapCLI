/* soapStub.h
   Generated by gSOAP 2.8.75 for replicator.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20875
# error "GSOAP VERSION 20875 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* replicator.h:15 */
#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (10)
/* ns:ErrorCode */
enum ns__ErrorCode {
	authoization_ok_ = 0,
	authoization_error_ = 1,
	connection_error_ = 2,
	query_error_ = 3,
	db_busy_ = 4
};
#endif

/* replicator.h:23 */
#ifndef SOAP_TYPE_ns__UserAccessRightCode
#define SOAP_TYPE_ns__UserAccessRightCode (11)
/* ns:UserAccessRightCode */
enum ns__UserAccessRightCode {
	none_ = 0,
	view_ = 1,
	edit_ = 2,
	delete_ = 3
};
#endif

/* replicator.h:30 */
#ifndef SOAP_TYPE_ns__MeasurementClasses
#define SOAP_TYPE_ns__MeasurementClasses (12)
/* ns:MeasurementClasses */
enum ns__MeasurementClasses {
	data_ = 0,
	alert_ = 1,
	hum_out_ = 2,
	nothing_ = 3
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns__BriefData;	/* replicator.h:37 */
class ns__ArrayOfBriefData;	/* replicator.h:43 */
class ns__StationInfo;	/* replicator.h:48 */
class ns__UnitInfo;	/* replicator.h:60 */
class ns__SensorInfo;	/* replicator.h:67 */
class ns__SensorData;	/* replicator.h:82 */
class ns__ArrayOfStationInfo;	/* replicator.h:89 */
class ns__ArrayOfSensorsInfo;	/* replicator.h:95 */
class ns__ArrayOfSensorData;	/* replicator.h:100 */
class ns__GetStationsResponse;	/* replicator.h:105 */
class ns__GetSensorsResponse;	/* replicator.h:112 */
class ns__GetHistoricalDataBriefResponse;	/* replicator.h:119 */
class ns__StInfo;	/* replicator.h:127 */
class ns__ArrayOfSensors;	/* replicator.h:136 */
struct ns__GetStations;	/* replicator.h:141 */
struct ns__GetSensors;	/* replicator.h:142 */
struct ns__GetHistoricalDataBrief;	/* replicator.h:143 */

/* replicator.h:37 */
#ifndef SOAP_TYPE_ns__BriefData
#define SOAP_TYPE_ns__BriefData (13)
/* complex XML schema type 'ns:BriefData': */
class SOAP_CMAC ns__BriefData {
      public:
        /// Required element 'Time' of XML schema type 'xsd:string'
        std::wstring Time;
        /// Required element 'Value' of XML schema type 'xsd:double'
        double Value;
      public:
        /// Return unique type id SOAP_TYPE_ns__BriefData
        virtual long soap_type(void) const { return SOAP_TYPE_ns__BriefData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__BriefData, default initialized and not managed by a soap context
        virtual ns__BriefData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__BriefData); }
      public:
        /// Constructor with default initializations
        ns__BriefData() : Time(), Value() { }
        virtual ~ns__BriefData() { }
        /// Friend allocator used by soap_new_ns__BriefData(struct soap*, int)
        friend SOAP_FMAC1 ns__BriefData * SOAP_FMAC2 soap_instantiate_ns__BriefData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:43 */
#ifndef SOAP_TYPE_ns__ArrayOfBriefData
#define SOAP_TYPE_ns__ArrayOfBriefData (15)
/* complex XML schema type 'ns:ArrayOfBriefData': */
class SOAP_CMAC ns__ArrayOfBriefData {
      public:
        /// Optional element 'BriefData' of XML schema type 'ns:BriefData'
        std::vector<ns__BriefData *> BriefData;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfBriefData
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfBriefData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfBriefData, default initialized and not managed by a soap context
        virtual ns__ArrayOfBriefData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfBriefData); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfBriefData() : BriefData() { }
        virtual ~ns__ArrayOfBriefData() { }
        /// Friend allocator used by soap_new_ns__ArrayOfBriefData(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfBriefData * SOAP_FMAC2 soap_instantiate_ns__ArrayOfBriefData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:48 */
#ifndef SOAP_TYPE_ns__StationInfo
#define SOAP_TYPE_ns__StationInfo (18)
/* complex XML schema type 'ns:StationInfo': */
class SOAP_CMAC ns__StationInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Code' of XML schema type 'xsd:int'
        int Code;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
        /// Required element 'UpdatePeriod' of XML schema type 'xsd:int'
        int UpdatePeriod;
        /// Required element 'Place' of XML schema type 'xsd:string'
        std::wstring Place;
        /// Required element 'Latitude' of XML schema type 'xsd:float'
        float Latitude;
        /// Required element 'Longitude' of XML schema type 'xsd:float'
        float Longitude;
        /// Required element 'UserAccessRight' of XML schema type 'xsd:string'
        std::wstring UserAccessRight;
      public:
        /// Return unique type id SOAP_TYPE_ns__StationInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__StationInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__StationInfo, default initialized and not managed by a soap context
        virtual ns__StationInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__StationInfo); }
      public:
        /// Constructor with default initializations
        ns__StationInfo() : ID(), Code(), Name(), UpdatePeriod(), Place(), Latitude(), Longitude(), UserAccessRight() { }
        virtual ~ns__StationInfo() { }
        /// Friend allocator used by soap_new_ns__StationInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__StationInfo * SOAP_FMAC2 soap_instantiate_ns__StationInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:60 */
#ifndef SOAP_TYPE_ns__UnitInfo
#define SOAP_TYPE_ns__UnitInfo (20)
/* complex XML schema type 'ns:UnitInfo': */
class SOAP_CMAC ns__UnitInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
      public:
        /// Return unique type id SOAP_TYPE_ns__UnitInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__UnitInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__UnitInfo, default initialized and not managed by a soap context
        virtual ns__UnitInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__UnitInfo); }
      public:
        /// Constructor with default initializations
        ns__UnitInfo() : ID(), Name() { }
        virtual ~ns__UnitInfo() { }
        /// Friend allocator used by soap_new_ns__UnitInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__UnitInfo * SOAP_FMAC2 soap_instantiate_ns__UnitInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:67 */
#ifndef SOAP_TYPE_ns__SensorInfo
#define SOAP_TYPE_ns__SensorInfo (21)
/* complex XML schema type 'ns:SensorInfo': */
class SOAP_CMAC ns__SensorInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
        /// Required element 'AveragePeriod' of XML schema type 'xsd:int'
        int AveragePeriod;
        /// Optional element 'Unit' of XML schema type 'ns:UnitInfo'
        ns__UnitInfo *Unit;
        /// Required element 'MeasurClass' of XML schema type 'ns:MeasurementClasses'
        enum ns__MeasurementClasses MeasurClass;
        /// Required element 'StationID' of XML schema type 'xsd:string'
        std::wstring StationID;
        /// Required element 'IsWeathercock' of XML schema type 'xsd:boolean'
        bool IsWeathercock;
        /// Required element 'PDKValue' of XML schema type 'xsd:double'
        double PDKValue;
        /// Required element 'PDKDayValue' of XML schema type 'xsd:double'
        double PDKDayValue;
        /// Required element 'DefaultColor' of XML schema type 'xsd:int'
        int DefaultColor;
      public:
        /// Return unique type id SOAP_TYPE_ns__SensorInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__SensorInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__SensorInfo, default initialized and not managed by a soap context
        virtual ns__SensorInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__SensorInfo); }
      public:
        /// Constructor with default initializations
        ns__SensorInfo() : ID(), Name(), AveragePeriod(), Unit(), MeasurClass(), StationID(), IsWeathercock(), PDKValue(), PDKDayValue(), DefaultColor() { }
        virtual ~ns__SensorInfo() { }
        /// Friend allocator used by soap_new_ns__SensorInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__SensorInfo * SOAP_FMAC2 soap_instantiate_ns__SensorInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:82 */
#ifndef SOAP_TYPE_ns__SensorData
#define SOAP_TYPE_ns__SensorData (24)
/* complex XML schema type 'ns:SensorData': */
class SOAP_CMAC ns__SensorData {
      public:
        /// Required element 'SensorID' of XML schema type 'xsd:string'
        std::wstring SensorID;
        /// Optional element 'Data' of XML schema type 'ns:ArrayOfBriefData'
        ns__ArrayOfBriefData *Data;
      public:
        /// Return unique type id SOAP_TYPE_ns__SensorData
        virtual long soap_type(void) const { return SOAP_TYPE_ns__SensorData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__SensorData, default initialized and not managed by a soap context
        virtual ns__SensorData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__SensorData); }
      public:
        /// Constructor with default initializations
        ns__SensorData() : SensorID(), Data() { }
        virtual ~ns__SensorData() { }
        /// Friend allocator used by soap_new_ns__SensorData(struct soap*, int)
        friend SOAP_FMAC1 ns__SensorData * SOAP_FMAC2 soap_instantiate_ns__SensorData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:89 */
#ifndef SOAP_TYPE_ns__ArrayOfStationInfo
#define SOAP_TYPE_ns__ArrayOfStationInfo (26)
/* complex XML schema type 'ns:ArrayOfStationInfo': */
class SOAP_CMAC ns__ArrayOfStationInfo {
      public:
        /// Optional element 'StationsInfo' of XML schema type 'ns:StationInfo'
        std::vector<ns__StationInfo> StationsInfo;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfStationInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfStationInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfStationInfo, default initialized and not managed by a soap context
        virtual ns__ArrayOfStationInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfStationInfo); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfStationInfo() : StationsInfo() { }
        virtual ~ns__ArrayOfStationInfo() { }
        /// Friend allocator used by soap_new_ns__ArrayOfStationInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfStationInfo * SOAP_FMAC2 soap_instantiate_ns__ArrayOfStationInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:95 */
#ifndef SOAP_TYPE_ns__ArrayOfSensorsInfo
#define SOAP_TYPE_ns__ArrayOfSensorsInfo (28)
/* complex XML schema type 'ns:ArrayOfSensorsInfo': */
class SOAP_CMAC ns__ArrayOfSensorsInfo {
      public:
        /// Optional element 'SensorsInfo' of XML schema type 'ns:SensorInfo'
        std::vector<ns__SensorInfo> SensorsInfo;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfSensorsInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfSensorsInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfSensorsInfo, default initialized and not managed by a soap context
        virtual ns__ArrayOfSensorsInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfSensorsInfo); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfSensorsInfo() : SensorsInfo() { }
        virtual ~ns__ArrayOfSensorsInfo() { }
        /// Friend allocator used by soap_new_ns__ArrayOfSensorsInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfSensorsInfo * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensorsInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:100 */
#ifndef SOAP_TYPE_ns__ArrayOfSensorData
#define SOAP_TYPE_ns__ArrayOfSensorData (30)
/* complex XML schema type 'ns:ArrayOfSensorData': */
class SOAP_CMAC ns__ArrayOfSensorData {
      public:
        /// Optional element 'SensorData' of XML schema type 'ns:SensorData'
        std::vector<ns__SensorData> SensorData;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfSensorData
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfSensorData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfSensorData, default initialized and not managed by a soap context
        virtual ns__ArrayOfSensorData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfSensorData); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfSensorData() : SensorData() { }
        virtual ~ns__ArrayOfSensorData() { }
        /// Friend allocator used by soap_new_ns__ArrayOfSensorData(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfSensorData * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensorData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:105 */
#ifndef SOAP_TYPE_ns__GetStationsResponse
#define SOAP_TYPE_ns__GetStationsResponse (32)
/* complex XML schema type 'ns:GetStationsResponse': */
class SOAP_CMAC ns__GetStationsResponse {
      public:
        /// Optional element 'GetStationsResult' of XML schema type 'ns:ArrayOfStationInfo'
        ns__ArrayOfStationInfo *GetStationsResult;
        /// Required element 'ErrorCode' of XML schema type 'ns:ErrorCode'
        enum ns__ErrorCode ErrorCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns__GetStationsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns__GetStationsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__GetStationsResponse, default initialized and not managed by a soap context
        virtual ns__GetStationsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__GetStationsResponse); }
      public:
        /// Constructor with default initializations
        ns__GetStationsResponse() : GetStationsResult(), ErrorCode(), soap() { }
        virtual ~ns__GetStationsResponse() { }
        /// Friend allocator used by soap_new_ns__GetStationsResponse(struct soap*, int)
        friend SOAP_FMAC1 ns__GetStationsResponse * SOAP_FMAC2 soap_instantiate_ns__GetStationsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:112 */
#ifndef SOAP_TYPE_ns__GetSensorsResponse
#define SOAP_TYPE_ns__GetSensorsResponse (35)
/* complex XML schema type 'ns:GetSensorsResponse': */
class SOAP_CMAC ns__GetSensorsResponse {
      public:
        /// Optional element 'GetSensorsResult' of XML schema type 'ns:ArrayOfSensorsInfo'
        ns__ArrayOfSensorsInfo *GetSensorsResult;
        /// Required element 'ErrorCode' of XML schema type 'ns:ErrorCode'
        enum ns__ErrorCode ErrorCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns__GetSensorsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns__GetSensorsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__GetSensorsResponse, default initialized and not managed by a soap context
        virtual ns__GetSensorsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__GetSensorsResponse); }
      public:
        /// Constructor with default initializations
        ns__GetSensorsResponse() : GetSensorsResult(), ErrorCode(), soap() { }
        virtual ~ns__GetSensorsResponse() { }
        /// Friend allocator used by soap_new_ns__GetSensorsResponse(struct soap*, int)
        friend SOAP_FMAC1 ns__GetSensorsResponse * SOAP_FMAC2 soap_instantiate_ns__GetSensorsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:119 */
#ifndef SOAP_TYPE_ns__GetHistoricalDataBriefResponse
#define SOAP_TYPE_ns__GetHistoricalDataBriefResponse (37)
/* complex XML schema type 'ns:GetHistoricalDataBriefResponse': */
class SOAP_CMAC ns__GetHistoricalDataBriefResponse {
      public:
        /// Optional element 'GetHistoricalDataBriefResult' of XML schema type 'ns:ArrayOfSensorData'
        ns__ArrayOfSensorData *GetHistoricalDataBriefResult;
        /// Required element 'ErrorCode' of XML schema type 'ns:ErrorCode'
        enum ns__ErrorCode ErrorCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns__GetHistoricalDataBriefResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns__GetHistoricalDataBriefResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__GetHistoricalDataBriefResponse, default initialized and not managed by a soap context
        virtual ns__GetHistoricalDataBriefResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__GetHistoricalDataBriefResponse); }
      public:
        /// Constructor with default initializations
        ns__GetHistoricalDataBriefResponse() : GetHistoricalDataBriefResult(), ErrorCode(), soap() { }
        virtual ~ns__GetHistoricalDataBriefResponse() { }
        /// Friend allocator used by soap_new_ns__GetHistoricalDataBriefResponse(struct soap*, int)
        friend SOAP_FMAC1 ns__GetHistoricalDataBriefResponse * SOAP_FMAC2 soap_instantiate_ns__GetHistoricalDataBriefResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:127 */
#ifndef SOAP_TYPE_ns__StInfo
#define SOAP_TYPE_ns__StInfo (39)
/* complex XML schema type 'ns:StInfo': */
class SOAP_CMAC ns__StInfo {
      public:
        /// Required element 'ID' of XML schema type 'xsd:string'
        std::wstring ID;
        /// Required element 'Code' of XML schema type 'xsd:int'
        int Code;
        /// Required element 'Name' of XML schema type 'xsd:string'
        std::wstring Name;
        /// Required element 'UpdatePeriod' of XML schema type 'xsd:int'
        int UpdatePeriod;
        /// Required element 'UserAccessRight' of XML schema type 'ns:UserAccessRightCode'
        enum ns__UserAccessRightCode UserAccessRight;
      public:
        /// Return unique type id SOAP_TYPE_ns__StInfo
        virtual long soap_type(void) const { return SOAP_TYPE_ns__StInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__StInfo, default initialized and not managed by a soap context
        virtual ns__StInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__StInfo); }
      public:
        /// Constructor with default initializations
        ns__StInfo() : ID(), Code(), Name(), UpdatePeriod(), UserAccessRight() { }
        virtual ~ns__StInfo() { }
        /// Friend allocator used by soap_new_ns__StInfo(struct soap*, int)
        friend SOAP_FMAC1 ns__StInfo * SOAP_FMAC2 soap_instantiate_ns__StInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:136 */
#ifndef SOAP_TYPE_ns__ArrayOfSensors
#define SOAP_TYPE_ns__ArrayOfSensors (40)
/* complex XML schema type 'ns:ArrayOfSensors': */
class SOAP_CMAC ns__ArrayOfSensors {
      public:
        /// Optional element 'string' of XML schema type 'xsd:string'
        std::vector<std::wstring> string;
      public:
        /// Return unique type id SOAP_TYPE_ns__ArrayOfSensors
        virtual long soap_type(void) const { return SOAP_TYPE_ns__ArrayOfSensors; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns__ArrayOfSensors, default initialized and not managed by a soap context
        virtual ns__ArrayOfSensors *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns__ArrayOfSensors); }
      public:
        /// Constructor with default initializations
        ns__ArrayOfSensors() : string() { }
        virtual ~ns__ArrayOfSensors() { }
        /// Friend allocator used by soap_new_ns__ArrayOfSensors(struct soap*, int)
        friend SOAP_FMAC1 ns__ArrayOfSensors * SOAP_FMAC2 soap_instantiate_ns__ArrayOfSensors(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:141 */
#ifndef SOAP_TYPE_ns__GetStations
#define SOAP_TYPE_ns__GetStations (44)
/* complex XML schema type 'ns:GetStations': */
struct SOAP_CMAC ns__GetStations {
      public:
        /** Context that manages this object */
        struct soap *soap;
        /** Required element 'login' of XML schema type 'xsd:string' */
        std::wstring login;
        /** Required element 'password' of XML schema type 'xsd:string' */
        std::wstring password;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetStations */
        long soap_type() const { return SOAP_TYPE_ns__GetStations; }
        /** Constructor with member initializations */
        ns__GetStations() : soap(), login(), password() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns__GetStations * SOAP_FMAC2 soap_instantiate_ns__GetStations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:142 */
#ifndef SOAP_TYPE_ns__GetSensors
#define SOAP_TYPE_ns__GetSensors (47)
/* complex XML schema type 'ns:GetSensors': */
struct SOAP_CMAC ns__GetSensors {
      public:
        /** Context that manages this object */
        struct soap *soap;
        /** Required element 'login' of XML schema type 'xsd:string' */
        std::wstring login;
        /** Required element 'password' of XML schema type 'xsd:string' */
        std::wstring password;
        /** Required element 'StationID' of XML schema type 'xsd:string' */
        std::wstring StationID;
        /** Required element 'From' of XML schema type 'xsd:string' */
        std::wstring From;
        /** Required element 'To' of XML schema type 'xsd:string' */
        std::wstring To;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetSensors */
        long soap_type() const { return SOAP_TYPE_ns__GetSensors; }
        /** Constructor with member initializations */
        ns__GetSensors() : soap(), login(), password(), StationID(), From(), To() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns__GetSensors * SOAP_FMAC2 soap_instantiate_ns__GetSensors(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:143 */
#ifndef SOAP_TYPE_ns__GetHistoricalDataBrief
#define SOAP_TYPE_ns__GetHistoricalDataBrief (50)
/* complex XML schema type 'ns:GetHistoricalDataBrief': */
struct SOAP_CMAC ns__GetHistoricalDataBrief {
      public:
        /** Context that manages this object */
        struct soap *soap;
        /** Required element 'login' of XML schema type 'xsd:string' */
        std::wstring login;
        /** Required element 'password' of XML schema type 'xsd:string' */
        std::wstring password;
        /** Required element 'AveragePeriod' of XML schema type 'xsd:int' */
        int AveragePeriod;
        /** Required element 'sSensors' of XML schema type 'ns:ArrayOfSensors' */
        ns__ArrayOfSensors sSensors;
        /** Required element 'From' of XML schema type 'xsd:string' */
        std::wstring From;
        /** Required element 'To' of XML schema type 'xsd:string' */
        std::wstring To;
      public:
        /** Return unique type id SOAP_TYPE_ns__GetHistoricalDataBrief */
        long soap_type() const { return SOAP_TYPE_ns__GetHistoricalDataBrief; }
        /** Constructor with member initializations */
        ns__GetHistoricalDataBrief() : soap(), login(), password(), AveragePeriod(), sSensors(), From(), To() { }
        /** Friend allocator */
        friend SOAP_FMAC1 ns__GetHistoricalDataBrief * SOAP_FMAC2 soap_instantiate_ns__GetHistoricalDataBrief(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* replicator.h:144 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:144 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:144 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (54)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:144 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (57)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* replicator.h:144 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (58)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* replicator.h:13 */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
typedef std::wstring xsd__string;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (19)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (14)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (23)
#endif

/* enum ns__MeasurementClasses has binding name 'ns__MeasurementClasses' for type 'ns:MeasurementClasses' */
#ifndef SOAP_TYPE_ns__MeasurementClasses
#define SOAP_TYPE_ns__MeasurementClasses (12)
#endif

/* enum ns__UserAccessRightCode has binding name 'ns__UserAccessRightCode' for type 'ns:UserAccessRightCode' */
#ifndef SOAP_TYPE_ns__UserAccessRightCode
#define SOAP_TYPE_ns__UserAccessRightCode (11)
#endif

/* enum ns__ErrorCode has binding name 'ns__ErrorCode' for type 'ns:ErrorCode' */
#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (10)
#endif

/* ns__ArrayOfSensors has binding name 'ns__ArrayOfSensors' for type 'ns:ArrayOfSensors' */
#ifndef SOAP_TYPE_ns__ArrayOfSensors
#define SOAP_TYPE_ns__ArrayOfSensors (40)
#endif

/* ns__StInfo has binding name 'ns__StInfo' for type 'ns:StInfo' */
#ifndef SOAP_TYPE_ns__StInfo
#define SOAP_TYPE_ns__StInfo (39)
#endif

/* ns__GetHistoricalDataBriefResponse has binding name 'ns__GetHistoricalDataBriefResponse' for type 'ns:GetHistoricalDataBriefResponse' */
#ifndef SOAP_TYPE_ns__GetHistoricalDataBriefResponse
#define SOAP_TYPE_ns__GetHistoricalDataBriefResponse (37)
#endif

/* ns__GetSensorsResponse has binding name 'ns__GetSensorsResponse' for type 'ns:GetSensorsResponse' */
#ifndef SOAP_TYPE_ns__GetSensorsResponse
#define SOAP_TYPE_ns__GetSensorsResponse (35)
#endif

/* ns__GetStationsResponse has binding name 'ns__GetStationsResponse' for type 'ns:GetStationsResponse' */
#ifndef SOAP_TYPE_ns__GetStationsResponse
#define SOAP_TYPE_ns__GetStationsResponse (32)
#endif

/* ns__ArrayOfSensorData has binding name 'ns__ArrayOfSensorData' for type 'ns:ArrayOfSensorData' */
#ifndef SOAP_TYPE_ns__ArrayOfSensorData
#define SOAP_TYPE_ns__ArrayOfSensorData (30)
#endif

/* ns__ArrayOfSensorsInfo has binding name 'ns__ArrayOfSensorsInfo' for type 'ns:ArrayOfSensorsInfo' */
#ifndef SOAP_TYPE_ns__ArrayOfSensorsInfo
#define SOAP_TYPE_ns__ArrayOfSensorsInfo (28)
#endif

/* ns__ArrayOfStationInfo has binding name 'ns__ArrayOfStationInfo' for type 'ns:ArrayOfStationInfo' */
#ifndef SOAP_TYPE_ns__ArrayOfStationInfo
#define SOAP_TYPE_ns__ArrayOfStationInfo (26)
#endif

/* ns__SensorData has binding name 'ns__SensorData' for type 'ns:SensorData' */
#ifndef SOAP_TYPE_ns__SensorData
#define SOAP_TYPE_ns__SensorData (24)
#endif

/* ns__SensorInfo has binding name 'ns__SensorInfo' for type 'ns:SensorInfo' */
#ifndef SOAP_TYPE_ns__SensorInfo
#define SOAP_TYPE_ns__SensorInfo (21)
#endif

/* ns__UnitInfo has binding name 'ns__UnitInfo' for type 'ns:UnitInfo' */
#ifndef SOAP_TYPE_ns__UnitInfo
#define SOAP_TYPE_ns__UnitInfo (20)
#endif

/* ns__StationInfo has binding name 'ns__StationInfo' for type 'ns:StationInfo' */
#ifndef SOAP_TYPE_ns__StationInfo
#define SOAP_TYPE_ns__StationInfo (18)
#endif

/* ns__ArrayOfBriefData has binding name 'ns__ArrayOfBriefData' for type 'ns:ArrayOfBriefData' */
#ifndef SOAP_TYPE_ns__ArrayOfBriefData
#define SOAP_TYPE_ns__ArrayOfBriefData (15)
#endif

/* ns__BriefData has binding name 'ns__BriefData' for type 'ns:BriefData' */
#ifndef SOAP_TYPE_ns__BriefData
#define SOAP_TYPE_ns__BriefData (13)
#endif

/* xsd__string has binding name 'xsd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
#endif

/* std::wstring has binding name 'std__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (58)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (57)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (54)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (52)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (51)
#endif

/* struct ns__GetHistoricalDataBrief has binding name 'ns__GetHistoricalDataBrief' for type 'ns:GetHistoricalDataBrief' */
#ifndef SOAP_TYPE_ns__GetHistoricalDataBrief
#define SOAP_TYPE_ns__GetHistoricalDataBrief (50)
#endif

/* struct ns__GetSensors has binding name 'ns__GetSensors' for type 'ns:GetSensors' */
#ifndef SOAP_TYPE_ns__GetSensors
#define SOAP_TYPE_ns__GetSensors (47)
#endif

/* struct ns__GetStations has binding name 'ns__GetStations' for type 'ns:GetStations' */
#ifndef SOAP_TYPE_ns__GetStations
#define SOAP_TYPE_ns__GetStations (44)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (60)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (59)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (53)
#endif

/* ns__ArrayOfSensorData * has binding name 'PointerTons__ArrayOfSensorData' for type 'ns:ArrayOfSensorData' */
#ifndef SOAP_TYPE_PointerTons__ArrayOfSensorData
#define SOAP_TYPE_PointerTons__ArrayOfSensorData (38)
#endif

/* ns__ArrayOfSensorsInfo * has binding name 'PointerTons__ArrayOfSensorsInfo' for type 'ns:ArrayOfSensorsInfo' */
#ifndef SOAP_TYPE_PointerTons__ArrayOfSensorsInfo
#define SOAP_TYPE_PointerTons__ArrayOfSensorsInfo (36)
#endif

/* ns__ArrayOfStationInfo * has binding name 'PointerTons__ArrayOfStationInfo' for type 'ns:ArrayOfStationInfo' */
#ifndef SOAP_TYPE_PointerTons__ArrayOfStationInfo
#define SOAP_TYPE_PointerTons__ArrayOfStationInfo (33)
#endif

/* ns__ArrayOfBriefData * has binding name 'PointerTons__ArrayOfBriefData' for type 'ns:ArrayOfBriefData' */
#ifndef SOAP_TYPE_PointerTons__ArrayOfBriefData
#define SOAP_TYPE_PointerTons__ArrayOfBriefData (25)
#endif

/* ns__UnitInfo * has binding name 'PointerTons__UnitInfo' for type 'ns:UnitInfo' */
#ifndef SOAP_TYPE_PointerTons__UnitInfo
#define SOAP_TYPE_PointerTons__UnitInfo (22)
#endif

/* ns__BriefData * has binding name 'PointerTons__BriefData' for type 'ns:BriefData' */
#ifndef SOAP_TYPE_PointerTons__BriefData
#define SOAP_TYPE_PointerTons__BriefData (16)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<std::wstring>  has binding name 'std__vectorTemplateOfxsd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__string
#define SOAP_TYPE_std__vectorTemplateOfxsd__string (41)
#endif

/* std::vector<ns__SensorData>  has binding name 'std__vectorTemplateOfns__SensorData' for type 'ns:SensorData' */
#ifndef SOAP_TYPE_std__vectorTemplateOfns__SensorData
#define SOAP_TYPE_std__vectorTemplateOfns__SensorData (31)
#endif

/* std::vector<ns__SensorInfo>  has binding name 'std__vectorTemplateOfns__SensorInfo' for type 'ns:SensorInfo' */
#ifndef SOAP_TYPE_std__vectorTemplateOfns__SensorInfo
#define SOAP_TYPE_std__vectorTemplateOfns__SensorInfo (29)
#endif

/* std::vector<ns__StationInfo>  has binding name 'std__vectorTemplateOfns__StationInfo' for type 'ns:StationInfo' */
#ifndef SOAP_TYPE_std__vectorTemplateOfns__StationInfo
#define SOAP_TYPE_std__vectorTemplateOfns__StationInfo (27)
#endif

/* std::vector<ns__BriefData *>  has binding name 'std__vectorTemplateOfPointerTons__BriefData' for type 'ns:BriefData' */
#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons__BriefData
#define SOAP_TYPE_std__vectorTemplateOfPointerTons__BriefData (17)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
